package main

import (
	sdkArgs "github.com/newrelic/infra-integrations-sdk/args"
	"github.com/newrelic/infra-integrations-sdk/data/event"
	"github.com/newrelic/infra-integrations-sdk/data/metric"
	"github.com/newrelic/infra-integrations-sdk/integration"
)

type argumentList struct {
	sdkArgs.DefaultArgumentList
}

const (
	integrationName    = "com.{{.Integration.CompanyName}}.{{.Integration.Name}}"
	integrationVersion = "0.1.0"
)

var (
    args argumentList
	remoteEntities = true // just as a sample
)

func main() {
	// Create Integration
	i, err := integration.New(integrationName, integrationVersion, integration.Args(&args))
	panicOnErr(err)

	if remoteEntities {
		integrationWithRemoteEntities(i)
	} else {
		integrationWithLocalEntity(i)
	}

	panicOnErr(i.Publish())
}

// This integration will show data attached to their corresponding entities
func integrationWithRemoteEntities(i *integration.Integration) {
	// Create Entity, entities name must be unique
	e1, err := i.Entity("instance-1", "custom")
	panicOnErr(err)

	// Add Event
	if args.All || args.Events {
		e1.AddEvent(event.New("restart", "status"))
	}

	// Add Inventory item
	if args.All || args.Inventory {
		e1.SetInventoryItem("instance", "version", "3.0.1")
	}

	// Add Metric
	if args.All || args.Metrics {
		m1, err := e1.NewMetricSet("CustomSample")
		panicOnErr(err)
		m1.SetMetric("some-data", 1000, metric.GAUGE)
	}

	// Create another Entity
	e2, err := i.Entity("instance-2", "custom")
	panicOnErr(err)

	if args.All || args.Inventory {
		e2.SetInventoryItem("instance", "version", "3.0.4")
	}

	if args.All || args.Metrics {
		m2, err := e2.NewMetricSet("CustomSample")
		panicOnErr(err)
		m2.SetMetric("some-data", 2000, metric.GAUGE)
	}
}

// This integration will show any data attached to the host where the agent is running
func integrationWithLocalEntity(i *integration.Integration) {
	localEntity := i.LocalEntity()

	// Add Event
	if args.All || args.Events {
		localEntity.AddEvent(event.New("restart", "status"))
	}

	// Add Inventory item
	if args.All || args.Inventory {
		localEntity.SetInventoryItem("instance", "version", "3.0.1")
	}

	// Add Metric
	if args.All || args.Metrics {
		m, err := localEntity.NewMetricSet("CustomSample")
		panicOnErr(err)

		m.SetMetric("some-data", 4000, metric.GAUGE)
	}
}

func panicOnErr(err error) {
	if err != nil {
		panic(err)
	}
}
