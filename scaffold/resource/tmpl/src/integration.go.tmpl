package main

import (
	sdkArgs "github.com/newrelic/infra-integrations-sdk/args"
	"github.com/newrelic/infra-integrations-sdk/data/event"
	"github.com/newrelic/infra-integrations-sdk/data/metric"
	"github.com/newrelic/infra-integrations-sdk/integration"
)

type argumentList struct {
	sdkArgs.DefaultArgumentList
}

const (
	integrationName    = "com.{{.Integration.CompanyName}}.{{.Integration.Name}}"
	integrationVersion = "0.1.0"
)

var args argumentList

func integrationWithRemoteEntities(i *integration.Integration) {

	// Create Entity
	e, err := i.Entity("redis-server", "cache")
	panicOnErr(err)

	// Add an Event example
	e.AddEvent(event.New("restart", "status"))

	// Add Inventory item Example
	e.SetInventoryItem("redis-server", "version", "3.0.1")

	// Add Metric example
	m, err := e.NewMetricSet("RedisServerSample")
	m.SetMetric("keys", 4000, metric.GAUGE)
	m.SetMetric("server-type", "slave", metric.ATTRIBUTE)

}

func integrationWithLocalEntity(i *integration.Integration) {
	// This integration will show any data attached to the host where the agent is running
	localEntity := i.LocalEntity()
	localEntity.AddEvent(event.New("restart", "status"))

	// Add Inventory item Example
	localEntity.SetInventoryItem("redis-server", "version", "3.0.1")

	// Add Metric example
	m, err := localEntity.NewMetricSet("RedisServerSample")
	panicOnErr(err)

	m.SetMetric("keys", 4000, metric.GAUGE)
	m.SetMetric("server-type", "master", metric.ATTRIBUTE)
}

func main() {

	remoteEntities := true
	// Create Integration
	i, err := integration.New(integrationName, integrationVersion, integration.Args(&args))
	panicOnErr(err)

	if remoteEntities {
		integrationWithRemoteEntities(i)
	} else {
		integrationWithLocalEntity(i)
	}
	panicOnErr(i.Publish())
}

func panicOnErr(err error) {
	if err != nil {
		panic(err)
	}
}
