// Code generated by go-bindata.
// sources:
// resource/tmpl/CHANGELOG.md.tmpl
// resource/tmpl/LICENSE.tmpl
// resource/tmpl/Makefile.tmpl
// resource/tmpl/README.md.tmpl
// resource/tmpl/configuration.yml.tmpl
// resource/tmpl/definition.yml.tmpl
// resource/tmpl/src/integration.go.tmpl
// resource/tmpl/src/integration_test.go.tmpl
// resource/tmpl/.gometalinter.json.tmpl
// resource/tmpl/vendor/vendor.json.tmpl
// DO NOT EDIT!

package scaffold

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceTmplChangelogMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x65\xa1\x43\x9d\xb2\x76\xab\x60\xa9\x80\x85\x7f\x42\xaa\x18\x1c\xfb\x9a\x18\x9c\xbb\xc8\xbe\x06\xa1\xaa\xdf\x1d\xb5\x01\x95\x8e\xf7\xd3\xe9\xbd\xdf\xab\x70\xd3\x39\x6e\x09\xf7\xd2\x1a\xb3\x4a\x09\x2c\xea\x9a\x44\xf0\x27\x5e\xa0\x02\xed\x62\xc1\x90\xe5\x83\xbc\xe2\x2b\xa6\x84\x86\x10\xc4\xef\x7a\x62\xa5\x80\xc8\xd3\xcb\x36\x26\xb2\xc6\x3c\x77\x84\xad\xe4\xde\x29\x62\x41\xe3\x0a\x05\x08\x63\x73\x47\x34\xc0\xfd\x16\x26\x69\xdf\xaf\x3a\xd5\x61\x59\xd7\x9f\x44\x83\xf3\x7f\xd8\x7a\xe9\xeb\x99\x71\x1c\x2e\x8b\x5d\xe8\x28\x4f\x42\x9b\x27\xea\x1d\x6b\xf4\x78\xa5\x5c\xa2\x70\xe4\x73\x5a\xa1\x7e\xa4\x6c\x25\xb7\xf5\xcc\x1a\x53\x55\x78\xe1\x4c\x89\x8e\x1e\xa6\xaa\x2a\xac\x42\xa0\x60\xe6\x78\x33\xa7\x73\xf2\xf9\x07\x1e\xa9\x97\xf1\x0c\xb0\xb0\xd7\x76\x81\x39\xf6\x7b\x7b\xeb\x94\x0e\x87\x8b\x94\x35\x47\x8d\x2e\x61\x9c\x4c\x96\x58\xb3\x4f\xbb\x40\x05\x0f\xa4\x39\xfa\x82\xe3\x92\x35\x8f\xc4\x2a\xf9\x1b\xc1\xa9\xfb\x09\x00\x00\xff\xff\xe2\x7a\x94\x62\x76\x01\x00\x00")

func resourceTmplChangelogMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplChangelogMdTmpl,
		"resource/tmpl/CHANGELOG.md.tmpl",
	)
}

func resourceTmplChangelogMdTmpl() (*asset, error) {
	bytes, err := resourceTmplChangelogMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/CHANGELOG.md.tmpl", size: 374, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplLicenseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf1\x77\xf1\xb7\x52\xf0\xcc\x4b\xce\x29\x4d\x49\x55\x48\x54\xc8\xc9\x4c\x4e\xcd\x2b\x4e\xd5\x03\x04\x00\x00\xff\xff\xe9\xb7\xf2\x07\x18\x00\x00\x00")

func resourceTmplLicenseTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplLicenseTmpl,
		"resource/tmpl/LICENSE.tmpl",
	)
}

func resourceTmplLicenseTmpl() (*asset, error) {
	bytes, err := resourceTmplLicenseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/LICENSE.tmpl", size: 24, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5f\x6f\xe2\x46\x10\x7f\x66\x3f\xc5\xc8\xf2\x03\xae\x64\x5b\x7d\xf5\x89\xea\x68\x8f\xa6\xa8\x57\x40\x07\x57\x29\x4a\x22\xb4\xd8\x63\xb3\xca\x7a\xd7\xf2\x2e\x0e\x34\xcd\x77\xaf\xc6\x06\x63\x93\x36\x41\x55\x55\x9d\x1f\xb0\x35\x7f\x76\x7e\xf3\xdb\xf9\xc3\x74\xb6\x9a\xdc\x7c\x19\xaf\xa6\xf3\x19\x40\x34\x02\x77\x68\xb6\x28\x25\x6c\xb8\x41\xc5\x73\x6c\x05\xc5\x53\xe2\x79\xec\xc7\xe9\x6c\xfc\xe5\x76\x3d\x1b\xff\x36\x01\x80\x11\x3c\x3f\x07\x53\x65\x31\x2b\xb9\x15\x5a\x05\x3f\xe9\xbc\xe0\xea\xb0\x28\x31\x15\xfb\x97\x17\xdf\x1d\x76\xce\xf7\xd8\xcd\x7c\xbd\xf8\xf5\x66\x09\xf5\xd3\x09\x96\x69\x90\xc2\x58\x08\xc2\x20\x08\xe0\x4f\xc8\x4a\x2c\xc0\xaf\xc0\x09\x2b\x54\x89\x2e\x43\xa7\xf6\xfd\x79\xfa\x79\xb2\xbc\xf4\x4d\x85\x4a\xc0\x94\x31\xf8\xf6\x50\x20\xa4\xe0\xd7\xb0\x9d\xef\x82\x4c\x3b\x1e\xfb\x7d\xfc\x79\xfa\x69\xbc\x9a\xac\x3f\x4d\x16\x4b\x18\x41\x26\xec\x76\xb7\x09\x62\x9d\x87\x99\x96\x5c\x65\xa1\x14\xca\xd2\xb7\x50\x96\xd5\x46\xed\xd3\xb3\x7e\xe4\x65\x22\xb8\xd2\x26\xcc\x74\x83\x8a\xad\x26\xcb\xd5\xba\x75\xe9\x59\xf3\xfd\x53\x98\xe9\x58\x57\xcd\x6f\x57\x35\x96\xf8\xb8\x14\x8d\xdc\xdf\xe7\x92\x31\x2e\x65\x04\x9b\x9d\x90\x09\x63\xf5\x2b\x82\x58\x22\x57\x50\x71\x29\x12\x6e\x11\x62\x9d\x17\x42\x22\x58\x34\x96\xb1\x5a\x19\xb1\xc1\x47\x8c\xb7\x1a\x9c\xd1\x88\xd8\xe8\x12\x0d\x24\xba\x3b\x1e\xf2\x10\x41\x89\xb9\xae\x84\xca\x60\x23\x14\x2f\x05\x1a\xe0\x2a\x81\x58\x57\x58\xf2\x0c\x21\x15\x12\x83\x20\x70\xd8\xe0\x63\x99\x83\x5f\xa6\x15\x19\xb6\xfa\xa0\x06\x79\xc2\xe2\x27\x58\x98\x2b\x82\xf7\xec\x09\x84\x50\xc6\x72\x29\x09\xc6\x51\x27\xb4\x82\x04\x0b\x54\x09\xaa\x58\xa0\x39\x62\xc8\x34\x64\x68\xe9\xfe\xdd\x61\xef\xfa\xbc\x0e\x0a\xad\xe4\x81\x50\x14\xa5\x50\x36\xbd\x02\x47\xcd\xc3\x4e\x29\x8a\x9f\xe9\x34\xb7\x54\x6a\x14\x6e\xfe\x75\xb5\xf8\xba\x1a\x39\xe7\x62\x4c\x73\x0b\xbe\x04\x77\x78\xaa\x39\xcf\x73\xe0\xc3\x3d\x1b\x88\x14\xee\xc0\xff\x03\x1c\xd7\x6d\xbc\x1c\x78\xf8\x00\x76\x8b\x0a\xee\xd9\x60\xd0\x30\x52\x70\x63\x30\x09\x1a\x0f\x94\x06\x3b\xba\x94\x0b\x89\x49\x00\x53\x15\xeb\xb2\xc4\xd8\x82\x39\x28\xcb\xf7\x20\x14\x1d\x03\xa9\x96\x52\x3f\x11\x44\xba\x13\x13\x35\x87\x1c\x9d\xcf\x41\x1b\xe1\x5e\x58\xf8\xbe\xfe\x4e\xc5\xbf\x67\x82\xea\xfe\x9f\xa9\x20\x6d\x43\x04\x35\xee\x7f\xcf\x83\x31\x3b\x34\x90\xea\x9d\x4a\xfe\x8f\x64\xa1\xc2\x37\x92\x25\xed\xb7\x93\xec\x31\xd7\xb6\xe4\xa3\x8b\x96\xea\xb5\x02\x63\xc7\x11\x71\x6d\x7b\x76\xcd\x2f\xba\xb3\x1e\x41\x6f\x34\xa6\x3b\x6c\x9a\x91\x04\xcd\x24\xa4\x2a\x8e\xcf\x10\x4e\xbd\x79\x1d\x04\x8a\x5e\x87\xa4\xd8\xee\xb0\xb3\x61\xbc\x73\xdc\x06\x93\xaf\x69\x30\x85\x7d\xa3\x6e\x9f\xb6\x18\xa2\x7e\x82\x5d\x64\x8c\xd1\x14\x6d\x78\xea\x59\xbd\x8f\xb8\x75\xbc\x60\x8c\xe4\xf4\x7e\x67\x98\xb5\xfb\xc2\x3b\x62\xb8\x92\x28\xb2\xed\xd6\xf1\x4e\x09\x5b\x0b\xcf\x41\x68\xc7\xd4\x66\xe7\xf2\xa5\x3d\x7a\xda\x31\xf0\xc3\xc5\x34\x27\xdb\xa8\x93\x4f\x0b\x87\xb1\x60\xf1\xcb\x7c\x76\x1b\x01\xa7\x7f\x01\x35\xed\xfd\x65\xf4\x37\xd5\xf7\x6a\x51\xbd\x66\xbd\xb7\xc2\x2e\x62\x36\x6b\xed\xaf\x00\x00\x00\xff\xff\x78\x71\xfa\x8f\x8a\x08\x00\x00")

func resourceTmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplMakefileTmpl,
		"resource/tmpl/Makefile.tmpl",
	)
}

func resourceTmplMakefileTmpl() (*asset, error) {
	bytes, err := resourceTmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/Makefile.tmpl", size: 2186, mode: os.FileMode(420), modTime: time.Unix(1511862059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplReadmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x07\xbc\x0b\x0c\x1f\xc0\xdb\x3a\x0b\x6f\x52\x20\x46\x0f\x30\x26\x47\xf2\xa0\x14\xc9\x0e\xc9\xd8\x46\x90\xbb\x17\xa2\x95\x86\x36\xd0\xec\x04\x7d\x0d\xe7\xfd\x27\xae\xf0\xc2\x67\xbc\xb2\x17\x8b\x7d\x18\x94\x72\xd1\x6a\x4b\x55\xc6\x3e\x14\x1e\x95\x8a\xc4\x80\x21\x2a\xde\xdf\xb1\xe9\xde\x6d\x5e\x68\x62\x7c\x7c\x18\xf3\x18\xec\x38\x5b\x95\xd4\x06\xe7\x7c\xb5\xc2\x2b\xff\xa9\xa2\x3c\x71\x28\xd9\x98\x5d\xb4\x75\x7e\x84\x0c\x28\xa7\xfb\x4d\x27\xca\xc8\x71\x62\xe4\xc4\x56\xc8\x43\xbf\x46\x37\x78\xbe\x6c\xb1\x0f\xb9\x90\xf7\x12\x46\x50\x30\x7c\x29\x4a\x98\xa2\xab\x9e\xd7\x48\xac\x93\xe4\x2c\x31\x64\x94\x08\xbe\xb0\xad\x85\x41\x38\x4a\x20\xbd\xae\xc1\xc5\x6e\x1a\xd1\x8f\x18\x06\x19\xeb\x6d\xeb\xf7\x48\x81\xd9\x2d\x50\xb6\x9f\x6a\x56\xb4\x86\x20\x61\xbc\xa1\x1d\xb8\x98\x9a\x7a\x8a\x35\xc8\x39\xd0\xbf\x36\x35\xb3\x76\x14\x4b\x97\x4f\x88\x26\xee\xc8\x8d\x40\xba\x08\x49\xa3\xe5\x9c\xdb\xc6\x07\xbc\xdb\x41\xbf\x32\x8d\xdc\xd5\x98\x28\x38\x2a\x51\xaf\xa0\xe0\x10\xdb\xcf\x20\x0f\xd2\xb1\xe5\xb9\x67\x7f\x3c\x71\xdd\x66\x4e\xf1\xdc\x2b\x94\xf2\xe9\x6d\x4a\x54\xe4\x28\x5e\xca\xd5\x98\x27\x1c\x6a\x4a\x51\x0b\x3b\xfc\x3c\x6c\xcd\xd3\xff\xae\x09\xde\x58\x9b\x91\xf9\x9b\x67\x27\x73\xb6\x5d\x1c\x7c\xa9\xde\xf1\x1b\xfb\x98\x5a\x85\xba\x54\xea\xa5\xb8\x2e\x3f\x47\xfd\x3d\xf8\x78\x5e\xa4\x48\xbe\xb7\xf2\x37\x00\x00\xff\xff\x03\xe0\xb9\x54\xda\x02\x00\x00")

func resourceTmplReadmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplReadmeMdTmpl,
		"resource/tmpl/README.md.tmpl",
	)
}

func resourceTmplReadmeMdTmpl() (*asset, error) {
	bytes, err := resourceTmplReadmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/README.md.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(1511862059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplConfigurationYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x79\x01\x0b\x5e\x43\x11\x62\x8d\x1a\x28\x11\x6a\xf5\x5a\xc6\x3a\x94\x60\x33\x91\x34\x0a\xa5\xf4\xdd\xa5\x7f\xdc\x5d\xd8\xc3\x5e\xf6\xfa\x7d\xbf\xf9\xe6\xe7\x38\x51\x17\x31\xb9\xc0\x0d\xa3\x27\x09\x6d\xf0\xd9\x34\x41\x66\x8e\x4d\x56\x04\xff\x8d\x3c\x5a\xf4\x04\xf3\x7c\x56\xef\xb9\x10\x8e\x87\x84\xdc\xd2\x20\x05\xc0\x0d\x6c\x83\xb9\xb1\xaf\xb5\xb2\x85\x06\xf3\xa0\x6d\x6d\x1e\x8d\xae\xee\x04\x00\x2c\xaf\x3c\xf2\xa7\x04\x4f\x29\xba\x76\x58\x43\x8c\xdd\x8f\x27\x4e\xeb\xc6\x1e\xdc\x4a\xc8\x55\xf5\xd4\xbc\xab\xf2\x4d\x6f\xb7\x3d\x7e\x50\x7f\x60\xbe\x68\x5c\x98\x52\xdd\xeb\xf2\x9f\x3a\x55\x78\xa9\x9f\x75\x05\x97\x45\x1c\xff\x12\xa7\x10\xc7\xeb\xaa\xfc\x05\x00\x00\xff\xff\x13\x20\xb7\xd8\x66\x01\x00\x00")

func resourceTmplConfigurationYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplConfigurationYmlTmpl,
		"resource/tmpl/configuration.yml.tmpl",
	)
}

func resourceTmplConfigurationYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplConfigurationYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/configuration.yml.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplDefinitionYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x6a\x86\x30\x10\x84\xef\x3e\xc5\xbe\x80\xf1\xee\xb1\xed\xc5\x4b\x5b\x28\xf4\x5a\xd2\xb8\x2d\x01\xb3\x1b\x36\x41\x2a\xe2\xbb\x97\xc4\xe8\x0f\xea\xe1\x3f\xfc\xb7\x64\xe6\x9b\x61\x12\xd2\x0e\x5b\x30\xec\xd4\x3c\x83\xea\x28\xe2\xaf\xe8\x68\x99\xd4\x33\x3b\xaf\x69\x7a\xd5\x0e\x61\x59\x4e\x76\xd1\xab\x1e\x83\x11\xeb\x93\xd6\xc2\x11\x7a\xb9\x99\x89\xf5\xc2\x91\x0d\x0f\x5f\x23\x4a\xb8\x0c\xbc\x17\xe2\x73\x05\x52\x88\xc3\x19\x7b\xfb\x48\x4e\x65\xd8\x39\x4d\x7d\x68\x2b\x00\x87\x51\xac\xc9\x47\x80\x62\xac\x17\x80\x1a\x54\xf3\x6d\xa9\x39\xd6\x3c\x59\xd2\xb2\xbd\x70\x67\xeb\xba\x74\x65\xc5\x52\x44\x19\xf5\x70\x1e\xd1\x15\x27\x4f\x49\xe0\x88\x14\x59\xa6\x87\x4c\xd8\xdb\xb2\xe6\x05\x7f\xec\xdf\xd5\x77\x25\x7d\x4b\xde\x37\xf5\x3f\x00\x00\xff\xff\xc2\xf0\xf0\x76\xf2\x01\x00\x00")

func resourceTmplDefinitionYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplDefinitionYmlTmpl,
		"resource/tmpl/definition.yml.tmpl",
	)
}

func resourceTmplDefinitionYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplDefinitionYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/definition.yml.tmpl", size: 498, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegrationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x41\x6f\xdb\x3c\x0c\x3d\x5b\xbf\x82\x9f\x0f\x1f\xec\x21\x51\x52\x6c\xa7\x01\x3d\x64\x5d\x50\x04\xe8\xba\xa1\x49\xb7\xb3\x6a\x33\xb6\x10\x4b\x0a\x24\x3a\x59\x10\xe4\xbf\x0f\x92\xbb\x46\x4e\x8a\x6d\x1d\xba\x9b\x2d\x3d\x3e\x3d\x92\x8f\x5c\x8b\x62\x25\x2a\x04\x25\xa4\x66\x4c\xaa\xb5\xb1\x04\x19\x4b\x5c\xb9\x9a\xd8\xca\x41\x5a\x49\xaa\xdb\x07\x5e\x18\x35\xd2\xb8\xb5\xd8\xc8\x62\x24\xf5\xd2\x8a\xa1\xd4\x84\x95\x15\x24\x8d\x76\x43\x57\xae\x46\xc2\x56\x2e\x65\xc9\x4b\x42\x4a\x41\x62\x84\x1b\xd4\xf4\x37\x81\x0a\xc9\xca\xe2\x85\x91\xd1\x41\xca\x72\xc6\x68\xb7\x46\x10\xb6\x6a\x15\x6a\xba\x91\x8e\xc0\x91\x6d\x0b\x82\xfd\x53\x15\xf8\x47\x5c\x8a\xb6\xa1\x49\x84\x62\x07\xc6\x0a\xa3\x5d\xa8\x56\xc4\x79\x2b\x14\x02\x00\x5c\x42\x5a\x18\xc5\xf7\x7b\x3e\x3b\x5e\xf2\x2b\xa3\xd6\x42\xef\x3c\xe8\x70\x38\xbd\xec\x4e\xd3\x1e\xdd\x57\xb4\x4e\x1a\xed\xe9\xc6\xfc\x82\x8f\x83\xe4\x8d\xb0\x5e\xb1\xeb\xc9\x66\x6c\xd9\xea\x02\xa2\xd8\x6f\x92\xea\x3b\x54\x86\x70\xaa\x49\x92\x44\x97\x49\x78\x13\x01\xe2\xd7\x73\xd8\x33\x96\x8c\x46\x70\x65\x51\x10\x42\x08\xd9\xb1\x04\x07\x80\xd6\xc2\xfb\x4b\x90\xbc\x3b\xcb\x52\x8b\xa5\x74\x43\x87\x76\x83\x36\x1d\x40\x5a\x88\xa2\xc6\x34\x67\xc9\x5a\x68\x59\x7c\xd6\x53\x6b\x33\xb4\x36\xef\x08\x27\x65\x09\x42\xc3\xd4\x77\x19\xf0\xbb\x50\xeb\x06\x59\x82\x7c\x52\x96\xe1\x2c\x0b\xfd\xe7\xb7\xb8\xf5\xcc\x8e\x84\x25\x4f\xea\x48\x50\xeb\xd2\x3c\x62\x99\x69\x8f\x34\x76\x07\x92\x50\xc1\xf4\xc8\x35\x47\x7a\xba\x9c\x11\xaa\x73\x8d\x9b\xae\x90\xfe\xf3\x2d\x1f\xf3\x8b\x34\xe2\xfd\x14\x7c\x74\xd4\xa6\x9e\x72\x46\x2f\xab\xbb\x9e\x23\x65\xe9\x9d\x67\x9d\x07\xd2\x79\x00\xfb\xac\x95\x7f\xbe\x03\x65\xe9\x0a\x77\x2e\x1d\xc0\xbb\xf1\x78\x3c\x80\xce\xa0\xfc\x7a\x72\x7f\x3d\x3d\x05\x76\xd2\x86\xde\x7e\x21\xdd\x46\x6c\xfc\xc7\x63\xc8\x64\xb1\xb8\x9b\x7d\xb8\x5f\x4c\x73\xe6\x9d\xf6\x5c\x6b\x6f\x4c\x21\x9a\xc7\x96\xfc\xba\xaf\x3e\xcf\x45\x2d\x5d\xcc\x00\x5b\xd9\x34\xe0\x6a\xb3\x05\xa1\x77\xe0\xe7\x09\x04\x91\xef\x64\x09\x64\x80\x6a\x84\xda\x38\x82\x6d\x8d\x16\xc3\xaf\xa8\x7c\x07\xa5\x03\xdb\x6a\x2d\x75\xc5\x92\xe6\x28\xa1\x73\x48\xac\x29\xef\xdd\xbf\x62\xbb\x63\xd6\x7f\xd5\xf8\xf8\x8d\x3f\xb0\xc0\xb9\xf1\x5f\xc5\x14\x4a\x38\x0a\x59\x9c\xbb\xe2\xa7\x29\xfc\xe2\xce\xba\xe1\xb5\xbd\x59\xf7\x59\x90\x6d\x31\x1e\xea\xc8\x17\x2c\x91\xc7\xc9\x8e\x97\x10\x6e\xb3\x93\x75\x36\x80\xf3\x85\xd4\x3b\xe3\x7e\x49\x66\xff\xfb\x95\x94\x3f\x5b\x0c\xb9\x84\x13\x71\x7b\x96\x24\xbf\x59\x55\x39\x4b\x0e\x80\x8d\xc3\xe7\xc0\x3d\xf3\x7b\x64\xef\x59\xc9\xbf\xb4\x0f\x8d\x74\x75\x96\x1f\x2b\xd5\x97\xe5\x73\x37\x36\x4c\x87\x5c\x86\x42\xfc\x77\x09\x5a\x36\xe1\xb1\x00\xed\xc4\x27\x07\x76\x60\x3f\x02\x00\x00\xff\xff\x2d\x49\xb3\x81\x26\x07\x00\x00")

func resourceTmplSrcIntegrationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegrationGoTmpl,
		"resource/tmpl/src/integration.go.tmpl",
	)
}

func resourceTmplSrcIntegrationGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegrationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration.go.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1515402576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegration_testGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x41\x4f\xf3\x38\x10\x3d\xc7\xbf\xc2\xf2\x29\x59\x05\x87\x72\x8c\xb4\x87\x2e\xaa\x50\xa5\x85\x03\x14\xed\xa1\xaa\x16\x93\x4e\x53\x43\x62\x17\x7b\x02\x54\x55\xff\xfb\xca\x76\xda\x26\x50\x90\x16\x81\x3e\xe9\x3b\x41\xe3\x79\x6f\xde\xcc\x9b\xb1\x57\xa2\x78\x14\x25\xd0\x5a\x48\x45\x88\xac\x57\xda\x20\x8d\x49\xc4\x40\x15\x7a\x2e\x55\x99\x3d\x58\xad\x18\x89\x18\x82\x45\xa9\x4a\x46\x48\xc4\x4a\x89\xcb\xe6\x9e\x17\xba\xce\x14\xbc\x18\xa8\x64\x91\x49\xb5\x30\xe2\x44\x2a\x84\xd2\x08\x94\x5a\xd9\x13\x3b\x7f\xcc\xe6\x02\x45\x06\xcf\xa0\x90\x7d\x01\x58\x03\x1a\x59\xfc\x4f\x64\xe7\xc3\x1b\xa4\x45\x03\x58\x2c\x4d\xe6\x8b\x59\xac\x33\x61\x2d\x18\x64\x24\x21\x64\xd1\xa8\x82\x4e\xc0\xe2\xc8\x89\x8d\x91\xfe\xd1\x56\xcc\x27\x09\xdd\x90\x28\xcb\xe8\x58\xb9\x68\xba\x04\x03\x14\x97\x40\x2b\x5d\xca\x82\x2e\xb4\xa1\x6b\xdd\x18\xea\xe2\x2d\x21\x91\x4c\x29\x18\x43\xf3\x3f\x69\x47\x09\xbf\x82\x97\xd8\x37\x91\xa5\x94\x0d\xf8\x29\x3f\x65\x09\x89\x82\x00\x7e\xa5\x47\xc6\x68\x13\xa3\x87\x26\x84\x44\x70\x20\xe1\x23\x85\x12\xd7\x01\x1d\xfe\x77\x1c\xee\xd7\x64\xbd\x82\xcf\x69\xf8\x70\x3e\x0f\x15\x79\x13\x0e\x32\x6e\x9a\xba\x16\x66\xcf\x74\x2e\x10\x4a\x6d\xd6\x2c\x71\xb0\x96\x6f\xf4\xd4\x88\xca\xb3\x71\xcf\x61\xa7\xa7\x33\xde\x02\x5b\xdc\x8e\x26\xf9\x1c\xb4\xa3\x7f\x97\xed\x3d\x6c\x90\xd2\x0a\x54\xbc\x43\x3b\x3d\xdb\x8e\x3d\x97\x7e\x24\xec\xef\x62\x50\x96\xd1\xe1\x7c\x4e\x43\x55\x14\x5e\x45\xbd\xaa\x80\x44\xf5\x9e\x1d\x9c\xb0\x70\x7c\x03\x18\x72\xb4\x3d\xf8\x94\xb8\xe6\x37\xd0\x06\x76\x41\x03\xe6\x3b\x1c\x16\x8b\x5f\x0c\x6f\x2f\x46\xc9\x87\xc1\x67\xae\x8c\x85\xd6\x6c\x0f\x18\x4e\x26\xd7\xe3\xbf\x6e\x27\x23\x9f\x22\xc8\x70\x2a\x6b\xde\x6a\x3a\xea\x67\x1b\x38\xed\xe9\x98\x1d\xf1\xbe\x97\xac\x17\x7f\xe6\xe2\x7b\x83\x70\x6e\x40\x20\xfc\xad\x0b\x51\xb5\xfd\x7f\x37\x12\xdf\x62\xb4\xe4\xdd\x1c\x09\x89\x1e\xf6\xac\xee\x6e\xe4\x97\xc2\xd8\xa5\xa8\x62\x79\x6c\x71\xee\x36\x4c\x89\x1a\x58\xde\x26\x64\x2b\xa3\x51\x17\xba\xfa\xf7\x19\x8c\x75\x37\x54\xce\xce\x58\xca\x3a\xfa\x3a\x27\x41\x5c\xca\xdc\x5d\xc8\xf2\xe9\x86\xb5\x8d\x61\xf9\x74\xe6\x30\x6e\x41\xdc\x16\xe5\x9b\x6d\xca\xfc\x7e\xfb\xa3\xed\x6c\x7b\x97\x52\x8b\x46\xaa\x32\x7e\x78\xbb\x40\xa1\x6f\xd7\x50\x6b\x84\x1f\x6d\xdc\x97\x36\xe4\x30\x0a\xbd\x50\x70\xf3\x25\x5c\x1f\xf8\x95\xa8\xe1\xa3\x78\x4f\xd6\x8b\x76\x5f\x9c\x98\x5f\x68\x1a\x84\x22\xf2\x1e\xeb\xae\x32\x86\x4e\x72\x7e\x50\xbf\x4d\xbf\xd1\xe5\xce\xe4\xfe\x23\x71\x39\xde\x71\xfd\x94\xe3\xc1\xec\xfe\xbe\xb8\x47\x68\x9f\xd8\xdd\x33\x63\x84\x3a\x6e\x37\x9d\xdd\x0b\xe3\xfe\x3c\x35\xcd\x2b\xf3\xdb\xe6\x84\xbc\x4a\x8b\x36\x5c\x7e\x07\xe4\x01\x76\xec\xad\xf1\x90\x94\xa2\x69\x8e\x0e\x87\xe7\x4f\xa9\x94\x53\x9f\x71\x76\xcc\xf6\xf0\xea\xf4\x13\xda\x38\x49\x52\x3a\xf0\xcd\xfd\x2f\x00\x00\xff\xff\xe2\x1d\x75\xcd\x2c\x09\x00\x00")

func resourceTmplSrcIntegration_testGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegration_testGoTmpl,
		"resource/tmpl/src/integration_test.go.tmpl",
	)
}

func resourceTmplSrcIntegration_testGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegration_testGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration_test.go.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplVendorVendorJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd6\x4b\x73\xea\x36\x14\x07\xf0\xb5\xf9\x14\x1d\xb6\xb9\x5c\xeb\x69\xcb\xcc\x74\x91\x04\xc2\x2b\x09\x21\x98\x52\xe8\x74\x21\x4b\xb2\x2d\x0c\x16\x91\x0d\x38\xdc\xb9\xdf\xbd\xe3\xb4\x8b\x4e\x9b\xc7\xc2\x1b\xbc\xf3\x19\xe9\xcc\xfc\xe6\x68\xfe\xd2\x8f\x96\xd3\x16\x66\xb7\x53\x79\xd9\xee\xfe\xd2\x6e\x7f\x6b\x39\x6d\x9d\xe4\xc6\xaa\xfa\xb7\x54\x45\xf9\x56\xda\x73\x91\xf1\xa4\xae\xfd\xd1\x72\x9c\x1f\x2d\xc7\x71\xda\x22\x55\x22\x2b\x0e\xbb\xf9\xf0\x1a\xd6\x8b\xf3\x65\x70\x8c\x9f\x27\x57\xa8\xba\xea\x65\xd1\x00\x07\x87\xf9\x6e\xe4\x2e\xc7\xc6\x88\x5f\xeb\x26\x4e\xdd\xa6\x4c\xeb\xa5\x89\x2e\xd3\x43\xf4\x5d\x98\x9d\x9b\xab\x93\x55\x5b\x2d\x5c\x9d\xc7\x96\x77\x74\x5e\xaa\xc4\xf2\x52\x9b\xbc\xe8\x14\x32\x73\xb9\x4d\x8a\x7f\x76\x5b\x75\xd4\x85\x36\x79\xdd\x01\x41\xc2\x08\xa8\x3f\x41\x29\xf3\x08\x22\x2c\xf0\x7c\x41\x29\xa7\xd8\x23\x84\x02\x04\x03\x44\xa9\xfc\xcf\xd6\x50\xef\xde\x60\x08\x40\xd6\x01\xa4\x83\xfc\x10\xd2\x2e\xf1\xbb\x18\xac\xdb\x2d\xc7\xf9\xf9\xed\x43\x1e\xa1\x67\x71\x6d\x8e\xc5\xe0\x14\xf7\x8f\x1b\xfd\xb2\x75\x83\xf9\x08\x8e\x97\xd7\xb6\xdf\x80\x27\xb8\x48\xd5\x3b\xbe\x88\xc7\x3e\x88\x3c\x9f\xe2\x40\x0a\xc4\x10\x94\x1e\x88\x28\x83\xc0\xc3\x41\xe4\x45\x02\x32\x16\x31\x2f\x66\x1f\xfb\xfc\x0e\x04\x1d\x08\x43\x08\xba\xc8\xeb\x62\xf4\x95\x6f\xc2\xd7\xf7\x73\xe9\x8e\x17\xeb\xb3\xbb\x7b\x89\x97\x78\x73\x27\xe1\x06\xcd\xe4\xf2\xba\x81\x4f\xf2\x92\xbb\xea\x58\x1f\xaf\x4b\x18\xa2\xb9\x1b\xa7\x38\x4c\x93\xd5\x40\x2c\x16\xc3\xa0\xaf\x63\x2a\xa7\x7b\x38\x88\x08\x6b\x8a\xd4\x79\xad\x34\xf6\xf5\x22\xa0\x0f\xf4\x66\x72\x0e\x17\xfd\x44\x22\x72\x75\x1a\x54\x21\x7d\x0c\xe2\x13\x9b\xdb\x73\xd1\x14\xba\x53\xa5\xd5\xe2\x22\x94\x2f\x23\x61\xd5\x9a\xb3\x78\x0e\x7a\x1e\x17\xe3\xf5\xd3\xd0\x9a\x2d\xae\x6e\x07\xb3\x06\xca\x7f\x15\x2e\x42\xd9\xdb\x44\xd8\x3e\x9d\x17\x5b\xb0\x4d\xf6\x7d\xf4\x68\xf3\xe7\x7e\x75\x4e\x8f\x3d\x73\x6a\xa0\xdc\x9a\xe4\x22\x74\x6c\xa2\x4e\xe3\xe1\xd3\xef\xc7\xab\x55\x55\xdd\x65\xab\xde\xf4\xde\x9f\x83\xa9\xb7\x4f\x9a\xe4\xea\x87\x87\xd4\xf3\x44\x44\x01\x11\x98\x52\x49\x28\x53\x94\x50\x0c\x28\xe3\x92\x70\xec\x47\xd2\x8f\x80\x64\x50\x04\xd1\xd7\x40\xc0\xea\x60\x05\x5f\x06\xab\x9e\x62\x3e\x1b\x55\xcf\xe7\x5b\x65\x56\xc3\xd5\x90\x68\x51\x66\xc9\xe6\x61\xed\x36\x01\xee\x95\x2d\x74\x71\x19\xa9\xfa\x9b\xb1\xd5\x63\x91\xf6\x99\xd4\x59\x02\x1e\xfc\x68\x3a\x8c\x17\xe1\xf9\xb0\x8f\x47\x0d\x84\x85\xcc\x2e\xe2\x62\xdc\x6e\x24\xbe\x4b\x57\xcf\xe3\x00\x8a\xfb\xf5\x19\x9f\x8a\x61\x70\x33\x9b\xa1\x71\xf4\xd9\xc5\xb8\xcf\x12\x57\x59\x6b\xec\x7b\xaf\x17\x06\x3d\x11\x00\x46\xa9\x87\x84\xf4\x95\x02\x58\xf9\x31\x83\x8c\x71\x28\x62\x19\x10\xc4\x28\x13\x52\x7d\x3e\x22\x5c\x23\x10\xec\x12\xda\x85\xf4\x2b\xc4\x6d\x85\xed\xa4\xc7\xe4\x8d\x7d\x9d\xa6\x2e\x9f\x64\xe1\x3d\x7b\x19\x67\x8f\x61\xfc\xf0\x3f\x84\xd9\xf2\x3c\xf9\x6e\x6c\xe2\x56\x6e\xf1\x5a\xb8\x87\x5c\x57\xef\x20\xa0\x1f\x20\xe9\x79\x52\x30\xa6\x28\xc0\x12\x8b\x08\x11\x00\xa8\xcf\x10\x82\x42\xc6\x30\xf6\x63\x85\xbc\xf8\x53\x04\xec\x00\x3f\x44\x6f\x93\xa0\xf0\x6f\x44\xcb\xf9\xb3\xf5\xb3\xf5\x57\x00\x00\x00\xff\xff\x9e\xff\x8f\x9c\x99\x0a\x00\x00")

func resourceTmplVendorVendorJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplVendorVendorJsonTmpl,
		"resource/tmpl/vendor/vendor.json.tmpl",
	)
}

var _resourceTmplGometalinterJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x72\xcd\x4b\x4c\xca\x49\x55\xb2\x52\x88\x56\x4a\x49\x4d\x4c\x49\xce\x4f\x49\x55\xd2\x51\x50\x4a\x2d\x2a\x4a\xce\x48\x4d\xce\x06\xb1\xd3\xf3\xd3\x72\x4b\x20\x8c\x9c\xcc\x3c\x28\x2b\x33\xb7\x20\xbf\xa8\xa4\x58\x29\x56\x07\x64\x4a\x58\x6a\x5e\x4a\x7e\x91\x92\x95\x42\x49\x51\x69\x2a\x58\xc4\xb5\x22\x39\xa7\x34\x05\x62\xb0\x9e\x9e\xbe\x9e\x9e\x7e\x19\x44\x4d\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\x4d\xab\xfc\x58\x7a\x00\x00\x00")

func resourceTmplGometalinterJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplGometalinterJsonTmpl,
		"resource/tmpl/.gometalinter.json.tmpl",
	)
}

func resourceTmplGometalinterJsonTmpl() (*asset, error) {
	bytes, err := resourceTmplGometalinterJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/.gometalinter.json.tmpl", size: 1880, mode: os.FileMode(420), modTime: time.Unix(1515403721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

func resourceTmplVendorVendorJsonTmpl() (*asset, error) {
	bytes, err := resourceTmplVendorVendorJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/vendor/vendor.json.tmpl", size: 1880, mode: os.FileMode(420), modTime: time.Unix(1515403721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/tmpl/CHANGELOG.md.tmpl":            resourceTmplChangelogMdTmpl,
	"resource/tmpl/LICENSE.tmpl":                 resourceTmplLicenseTmpl,
	"resource/tmpl/Makefile.tmpl":                resourceTmplMakefileTmpl,
	"resource/tmpl/README.md.tmpl":               resourceTmplReadmeMdTmpl,
	"resource/tmpl/configuration.yml.tmpl":       resourceTmplConfigurationYmlTmpl,
	"resource/tmpl/definition.yml.tmpl":          resourceTmplDefinitionYmlTmpl,
	"resource/tmpl/src/integration.go.tmpl":      resourceTmplSrcIntegrationGoTmpl,
	"resource/tmpl/src/integration_test.go.tmpl": resourceTmplSrcIntegration_testGoTmpl,
	"resource/tmpl/.gometalinter.json.tmpl":      resourceTmplGometalinterJsonTmpl,
	"resource/tmpl/vendor/vendor.json.tmpl":      resourceTmplVendorVendorJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resource": {nil, map[string]*bintree{
		"tmpl": {nil, map[string]*bintree{
			"CHANGELOG.md.tmpl":      {resourceTmplChangelogMdTmpl, map[string]*bintree{}},
			"LICENSE.tmpl":           {resourceTmplLicenseTmpl, map[string]*bintree{}},
			"Makefile.tmpl":          {resourceTmplMakefileTmpl, map[string]*bintree{}},
			"README.md.tmpl":         {resourceTmplReadmeMdTmpl, map[string]*bintree{}},
			"configuration.yml.tmpl": {resourceTmplConfigurationYmlTmpl, map[string]*bintree{}},
			"definition.yml.tmpl":    {resourceTmplDefinitionYmlTmpl, map[string]*bintree{}},
			"src": {nil, map[string]*bintree{
				"integration.go.tmpl":      {resourceTmplSrcIntegrationGoTmpl, map[string]*bintree{}},
				"integration_test.go.tmpl": {resourceTmplSrcIntegration_testGoTmpl, map[string]*bintree{}},
			}},
			"vendor": {nil, map[string]*bintree{
				"vendor.json.tmpl": {resourceTmplVendorVendorJsonTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
