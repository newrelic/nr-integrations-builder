// Code generated by go-bindata.
// sources:
// resource/tmpl/CHANGELOG.md.tmpl
// resource/tmpl/LICENSE.tmpl
// resource/tmpl/Makefile.tmpl
// resource/tmpl/README.md.tmpl
// resource/tmpl/configuration.yml.tmpl
// resource/tmpl/definition.yml.tmpl
// resource/tmpl/src/integration.go.tmpl
// resource/tmpl/src/integration_test.go.tmpl
// resource/tmpl/.gometalinter.json.tmpl
// resource/tmpl/vendor/vendor.json.tmpl
// DO NOT EDIT!

package scaffold

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceTmplChangelogMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x65\xa1\x43\x9d\xb2\x76\xab\x60\xa9\x80\x85\x7f\x42\xaa\x18\x1c\xfb\x9a\x18\x9c\xbb\xc8\xbe\x06\xa1\xaa\xdf\x1d\xb5\x01\x95\x8e\xf7\xd3\xe9\xbd\xdf\xab\x70\xd3\x39\x6e\x09\xf7\xd2\x1a\xb3\x4a\x09\x2c\xea\x9a\x44\xf0\x27\x5e\xa0\x02\xed\x62\xc1\x90\xe5\x83\xbc\xe2\x2b\xa6\x84\x86\x10\xc4\xef\x7a\x62\xa5\x80\xc8\xd3\xcb\x36\x26\xb2\xc6\x3c\x77\x84\xad\xe4\xde\x29\x62\x41\xe3\x0a\x05\x08\x63\x73\x47\x34\xc0\xfd\x16\x26\x69\xdf\xaf\x3a\xd5\x61\x59\xd7\x9f\x44\x83\xf3\x7f\xd8\x7a\xe9\xeb\x99\x71\x1c\x2e\x8b\x5d\xe8\x28\x4f\x42\x9b\x27\xea\x1d\x6b\xf4\x78\xa5\x5c\xa2\x70\xe4\x73\x5a\xa1\x7e\xa4\x6c\x25\xb7\xf5\xcc\x1a\x53\x55\x78\xe1\x4c\x89\x8e\x1e\xa6\xaa\x2a\xac\x42\xa0\x60\xe6\x78\x33\xa7\x73\xf2\xf9\x07\x1e\xa9\x97\xf1\x0c\xb0\xb0\xd7\x76\x81\x39\xf6\x7b\x7b\xeb\x94\x0e\x87\x8b\x94\x35\x47\x8d\x2e\x61\x9c\x4c\x96\x58\xb3\x4f\xbb\x40\x05\x0f\xa4\x39\xfa\x82\xe3\x92\x35\x8f\xc4\x2a\xf9\x1b\xc1\xa9\xfb\x09\x00\x00\xff\xff\xe2\x7a\x94\x62\x76\x01\x00\x00")

func resourceTmplChangelogMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplChangelogMdTmpl,
		"resource/tmpl/CHANGELOG.md.tmpl",
	)
}

func resourceTmplChangelogMdTmpl() (*asset, error) {
	bytes, err := resourceTmplChangelogMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/CHANGELOG.md.tmpl", size: 374, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplLicenseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf1\x77\xf1\xb7\x52\xf0\xcc\x4b\xce\x29\x4d\x49\x55\x48\x54\xc8\xc9\x4c\x4e\xcd\x2b\x4e\xd5\x03\x04\x00\x00\xff\xff\xe9\xb7\xf2\x07\x18\x00\x00\x00")

func resourceTmplLicenseTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplLicenseTmpl,
		"resource/tmpl/LICENSE.tmpl",
	)
}

func resourceTmplLicenseTmpl() (*asset, error) {
	bytes, err := resourceTmplLicenseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/LICENSE.tmpl", size: 24, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5f\x6f\xe2\x46\x10\x7f\x66\x3f\xc5\xc8\xf2\x03\xae\x64\x5b\x7d\xf5\x89\xea\x68\x8f\xa6\xa8\x57\x40\x07\x57\x29\x4a\x22\xb4\xd8\x63\xb3\xca\x7a\xd7\xf2\x2e\x0e\x34\xcd\x77\xaf\xc6\x06\x63\x93\x36\x41\x55\x55\x9d\x1f\xb0\x35\x7f\x76\x7e\xf3\xdb\xf9\xc3\x74\xb6\x9a\xdc\x7c\x19\xaf\xa6\xf3\x19\x40\x34\x02\x77\x68\xb6\x28\x25\x6c\xb8\x41\xc5\x73\x6c\x05\xc5\x53\xe2\x79\xec\xc7\xe9\x6c\xfc\xe5\x76\x3d\x1b\xff\x36\x01\x80\x11\x3c\x3f\x07\x53\x65\x31\x2b\xb9\x15\x5a\x05\x3f\xe9\xbc\xe0\xea\xb0\x28\x31\x15\xfb\x97\x17\xdf\x1d\x76\xce\xf7\xd8\xcd\x7c\xbd\xf8\xf5\x66\x09\xf5\xd3\x09\x96\x69\x90\xc2\x58\x08\xc2\x20\x08\xe0\x4f\xc8\x4a\x2c\xc0\xaf\xc0\x09\x2b\x54\x89\x2e\x43\xa7\xf6\xfd\x79\xfa\x79\xb2\xbc\xf4\x4d\x85\x4a\xc0\x94\x31\xf8\xf6\x50\x20\xa4\xe0\xd7\xb0\x9d\xef\x82\x4c\x3b\x1e\xfb\x7d\xfc\x79\xfa\x69\xbc\x9a\xac\x3f\x4d\x16\x4b\x18\x41\x26\xec\x76\xb7\x09\x62\x9d\x87\x99\x96\x5c\x65\xa1\x14\xca\xd2\xb7\x50\x96\xd5\x46\xed\xd3\xb3\x7e\xe4\x65\x22\xb8\xd2\x26\xcc\x74\x83\x8a\xad\x26\xcb\xd5\xba\x75\xe9\x59\xf3\xfd\x53\x98\xe9\x58\x57\xcd\x6f\x57\x35\x96\xf8\xb8\x14\x8d\xdc\xdf\xe7\x92\x31\x2e\x65\x04\x9b\x9d\x90\x09\x63\xf5\x2b\x82\x58\x22\x57\x50\x71\x29\x12\x6e\x11\x62\x9d\x17\x42\x22\x58\x34\x96\xb1\x5a\x19\xb1\xc1\x47\x8c\xb7\x1a\x9c\xd1\x88\xd8\xe8\x12\x0d\x24\xba\x3b\x1e\xf2\x10\x41\x89\xb9\xae\x84\xca\x60\x23\x14\x2f\x05\x1a\xe0\x2a\x81\x58\x57\x58\xf2\x0c\x21\x15\x12\x83\x20\x70\xd8\xe0\x63\x99\x83\x5f\xa6\x15\x19\xb6\xfa\xa0\x06\x79\xc2\xe2\x27\x58\x98\x2b\x82\xf7\xec\x09\x84\x50\xc6\x72\x29\x09\xc6\x51\x27\xb4\x82\x04\x0b\x54\x09\xaa\x58\xa0\x39\x62\xc8\x34\x64\x68\xe9\xfe\xdd\x61\xef\xfa\xbc\x0e\x0a\xad\xe4\x81\x50\x14\xa5\x50\x36\xbd\x02\x47\xcd\xc3\x4e\x29\x8a\x9f\xe9\x34\xb7\x54\x6a\x14\x6e\xfe\x75\xb5\xf8\xba\x1a\x39\xe7\x62\x4c\x73\x0b\xbe\x04\x77\x78\xaa\x39\xcf\x73\xe0\xc3\x3d\x1b\x88\x14\xee\xc0\xff\x03\x1c\xd7\x6d\xbc\x1c\x78\xf8\x00\x76\x8b\x0a\xee\xd9\x60\xd0\x30\x52\x70\x63\x30\x09\x1a\x0f\x94\x06\x3b\xba\x94\x0b\x89\x49\x00\x53\x15\xeb\xb2\xc4\xd8\x82\x39\x28\xcb\xf7\x20\x14\x1d\x03\xa9\x96\x52\x3f\x11\x44\xba\x13\x13\x35\x87\x1c\x9d\xcf\x41\x1b\xe1\x5e\x58\xf8\xbe\xfe\x4e\xc5\xbf\x67\x82\xea\xfe\x9f\xa9\x20\x6d\x43\x04\x35\xee\x7f\xcf\x83\x31\x3b\x34\x90\xea\x9d\x4a\xfe\x8f\x64\xa1\xc2\x37\x92\x25\xed\xb7\x93\xec\x31\xd7\xb6\xe4\xa3\x8b\x96\xea\xb5\x02\x63\xc7\x11\x71\x6d\x7b\x76\xcd\x2f\xba\xb3\x1e\x41\x6f\x34\xa6\x3b\x6c\x9a\x91\x04\xcd\x24\xa4\x2a\x8e\xcf\x10\x4e\xbd\x79\x1d\x04\x8a\x5e\x87\xa4\xd8\xee\xb0\xb3\x61\xbc\x73\xdc\x06\x93\xaf\x69\x30\x85\x7d\xa3\x6e\x9f\xb6\x18\xa2\x7e\x82\x5d\x64\x8c\xd1\x14\x6d\x78\xea\x59\xbd\x8f\xb8\x75\xbc\x60\x8c\xe4\xf4\x7e\x67\x98\xb5\xfb\xc2\x3b\x62\xb8\x92\x28\xb2\xed\xd6\xf1\x4e\x09\x5b\x0b\xcf\x41\x68\xc7\xd4\x66\xe7\xf2\xa5\x3d\x7a\xda\x31\xf0\xc3\xc5\x34\x27\xdb\xa8\x93\x4f\x0b\x87\xb1\x60\xf1\xcb\x7c\x76\x1b\x01\xa7\x7f\x01\x35\xed\xfd\x65\xf4\x37\xd5\xf7\x6a\x51\xbd\x66\xbd\xb7\xc2\x2e\x62\x36\x6b\xed\xaf\x00\x00\x00\xff\xff\x78\x71\xfa\x8f\x8a\x08\x00\x00")

func resourceTmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplMakefileTmpl,
		"resource/tmpl/Makefile.tmpl",
	)
}

func resourceTmplMakefileTmpl() (*asset, error) {
	bytes, err := resourceTmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/Makefile.tmpl", size: 2186, mode: os.FileMode(420), modTime: time.Unix(1511862059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplReadmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x07\xbc\x0b\x0c\x1f\xc0\xdb\x3a\x0b\x6f\x52\x20\x46\x0f\x30\x26\x47\xf2\xa0\x14\xc9\x0e\xc9\xd8\x46\x90\xbb\x17\xa2\x95\x86\x36\xd0\xec\x04\x7d\x0d\xe7\xfd\x27\xae\xf0\xc2\x67\xbc\xb2\x17\x8b\x7d\x18\x94\x72\xd1\x6a\x4b\x55\xc6\x3e\x14\x1e\x95\x8a\xc4\x80\x21\x2a\xde\xdf\xb1\xe9\xde\x6d\x5e\x68\x62\x7c\x7c\x18\xf3\x18\xec\x38\x5b\x95\xd4\x06\xe7\x7c\xb5\xc2\x2b\xff\xa9\xa2\x3c\x71\x28\xd9\x98\x5d\xb4\x75\x7e\x84\x0c\x28\xa7\xfb\x4d\x27\xca\xc8\x71\x62\xe4\xc4\x56\xc8\x43\xbf\x46\x37\x78\xbe\x6c\xb1\x0f\xb9\x90\xf7\x12\x46\x50\x30\x7c\x29\x4a\x98\xa2\xab\x9e\xd7\x48\xac\x93\xe4\x2c\x31\x64\x94\x08\xbe\xb0\xad\x85\x41\x38\x4a\x20\xbd\xae\xc1\xc5\x6e\x1a\xd1\x8f\x18\x06\x19\xeb\x6d\xeb\xf7\x48\x81\xd9\x2d\x50\xb6\x9f\x6a\x56\xb4\x86\x20\x61\xbc\xa1\x1d\xb8\x98\x9a\x7a\x8a\x35\xc8\x39\xd0\xbf\x36\x35\xb3\x76\x14\x4b\x97\x4f\x88\x26\xee\xc8\x8d\x40\xba\x08\x49\xa3\xe5\x9c\xdb\xc6\x07\xbc\xdb\x41\xbf\x32\x8d\xdc\xd5\x98\x28\x38\x2a\x51\xaf\xa0\xe0\x10\xdb\xcf\x20\x0f\xd2\xb1\xe5\xb9\x67\x7f\x3c\x71\xdd\x66\x4e\xf1\xdc\x2b\x94\xf2\xe9\x6d\x4a\x54\xe4\x28\x5e\xca\xd5\x98\x27\x1c\x6a\x4a\x51\x0b\x3b\xfc\x3c\x6c\xcd\xd3\xff\xae\x09\xde\x58\x9b\x91\xf9\x9b\x67\x27\x73\xb6\x5d\x1c\x7c\xa9\xde\xf1\x1b\xfb\x98\x5a\x85\xba\x54\xea\xa5\xb8\x2e\x3f\x47\xfd\x3d\xf8\x78\x5e\xa4\x48\xbe\xb7\xf2\x37\x00\x00\xff\xff\x03\xe0\xb9\x54\xda\x02\x00\x00")

func resourceTmplReadmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplReadmeMdTmpl,
		"resource/tmpl/README.md.tmpl",
	)
}

func resourceTmplReadmeMdTmpl() (*asset, error) {
	bytes, err := resourceTmplReadmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/README.md.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(1511862059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplConfigurationYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x79\x01\x0b\x5e\x43\x11\x62\x8d\x1a\x28\x11\x6a\xf5\x5a\xc6\x3a\x94\x60\x33\x91\x34\x0a\xa5\xf4\xdd\xa5\x7f\xdc\x5d\xd8\xc3\x5e\xf6\xfa\x7d\xbf\xf9\xe6\xe7\x38\x51\x17\x31\xb9\xc0\x0d\xa3\x27\x09\x6d\xf0\xd9\x34\x41\x66\x8e\x4d\x56\x04\xff\x8d\x3c\x5a\xf4\x04\xf3\x7c\x56\xef\xb9\x10\x8e\x87\x84\xdc\xd2\x20\x05\xc0\x0d\x6c\x83\xb9\xb1\xaf\xb5\xb2\x85\x06\xf3\xa0\x6d\x6d\x1e\x8d\xae\xee\x04\x00\x2c\xaf\x3c\xf2\xa7\x04\x4f\x29\xba\x76\x58\x43\x8c\xdd\x8f\x27\x4e\xeb\xc6\x1e\xdc\x4a\xc8\x55\xf5\xd4\xbc\xab\xf2\x4d\x6f\xb7\x3d\x7e\x50\x7f\x60\xbe\x68\x5c\x98\x52\xdd\xeb\xf2\x9f\x3a\x55\x78\xa9\x9f\x75\x05\x97\x45\x1c\xff\x12\xa7\x10\xc7\xeb\xaa\xfc\x05\x00\x00\xff\xff\x13\x20\xb7\xd8\x66\x01\x00\x00")

func resourceTmplConfigurationYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplConfigurationYmlTmpl,
		"resource/tmpl/configuration.yml.tmpl",
	)
}

func resourceTmplConfigurationYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplConfigurationYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/configuration.yml.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplDefinitionYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x0a\xff\x81\xe6\xf6\x8e\xc0\x72\x0b\x20\x21\xb1\xa2\x90\x33\x28\xd2\xc5\x8e\x9c\xa8\xa2\xaa\xfa\xdf\x91\xd3\xb4\x48\x6d\x87\x0e\x6c\xc9\x7b\x9f\x5f\x5e\x4c\x36\x60\x07\x8e\x83\x19\x47\x30\x57\xca\xf8\x2d\x36\x7b\x26\xf3\xc8\x21\x5a\x1a\x9e\x6d\x40\x98\xa6\x9d\x5d\xf5\xe6\x86\xc9\x89\x8f\xaa\x75\xb0\x85\x9e\xfe\x4c\x65\xa3\x70\x66\xc7\xf7\x8f\x1e\x25\x1d\x0e\xbc\x56\xe2\x7d\x06\x74\x88\xd3\x1e\x7b\x79\x53\xa7\x71\x1c\x82\xa5\x5b\xea\x1a\x80\x80\x59\xbc\x2b\x47\x80\x6a\xcc\x17\x80\x16\xcc\xe5\xd3\xd3\x65\x1b\xf3\xe0\xc9\xca\xf2\xc3\x95\x6d\xdb\x9a\x55\x14\x4f\x19\xa5\xb7\xf7\x7d\x89\x6b\x75\x4a\x15\x05\x7b\xa4\xcc\x32\xfc\x4b\x85\x35\xad\x68\x51\xf0\xcb\xff\x1c\xad\x4b\xf5\x65\xf2\x5c\x55\x00\xd4\xe8\xa3\x4d\x9d\x2f\xa9\x15\xe7\x98\xf3\x2f\xff\x06\x00\x00\xff\xff\x27\xb6\xf9\xcc\x6b\x02\x00\x00")

func resourceTmplDefinitionYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplDefinitionYmlTmpl,
		"resource/tmpl/definition.yml.tmpl",
	)
}

func resourceTmplDefinitionYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplDefinitionYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/definition.yml.tmpl", size: 498, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegrationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xaa\x43\x21\x15\xb6\x64\xbb\x39\x15\xf0\xc1\x48\x8d\x20\x40\xfa\x81\xa6\xbb\x7b\x66\xa4\xb1\xc4\x8d\x48\x7a\xc9\x51\x0c\xc3\xf1\x7f\x5f\x90\xd2\x5a\x92\xe3\xc4\xeb\x1c\x72\x93\xc8\x99\x37\x6f\xde\x9b\xe1\x9a\x67\x8f\xbc\x40\x90\x5c\x28\xc6\x84\x5c\x6b\x43\x10\xb1\xc0\xe6\x8f\x0b\x53\x58\x08\x0b\x41\x65\xfd\x90\x64\x5a\xa6\x0a\x37\x06\x2b\x91\xa5\x42\xad\x0c\x1f\x0b\x45\x58\x18\x4e\x42\x2b\x3b\xb6\xf9\x63\xca\x4d\x61\x43\x16\x5c\x92\x92\x73\xe2\x29\x3e\xa1\xa2\xf7\x24\x4a\x24\x23\xb2\x0b\x33\x7b\x07\x21\x8b\x19\xa3\xed\x1a\x81\x9b\xa2\x96\xa8\xe8\x4e\x58\x02\x4b\xa6\xce\x08\x76\x07\x15\x92\x3f\x71\xc5\xeb\x8a\x16\xbd\x28\xb6\x67\x2c\xd3\xca\x7a\xb5\x7a\x98\x7f\x73\x89\x00\x00\x73\x08\x33\x2d\x93\xdd\x2e\xb9\xed\x2e\x93\x6b\x2d\xd7\x5c\x6d\x5d\xd0\x7e\x7f\x7c\xd9\x9c\x86\x03\xb8\xcf\x68\xac\xd0\xca\xc1\x4d\x92\x69\x32\xf1\x94\x9f\xb8\x81\x88\xb9\x2a\x4e\xf2\x01\x79\x16\x18\x94\x9a\x70\xa9\x48\x90\x40\x0b\x73\x20\x53\x23\xa4\x29\x7c\xad\x2d\x01\xb7\xc0\xc1\x72\xb9\xae\xd0\x21\xad\x6a\x95\x79\xef\xa3\xd8\xf5\x9b\xa6\x70\x6d\x90\x13\x42\x8f\x17\x0b\xc4\x08\xd0\x18\xf8\x63\x0e\xa2\x4f\x17\x37\xd1\x51\xe3\x23\x78\x49\x7d\x70\x96\x38\x39\xa3\x5f\x1d\xed\x38\x66\xc1\x9a\x2b\x91\xfd\xa3\x96\xc6\x44\x68\x4c\xcc\x58\x20\x56\x70\xd4\xc0\x8e\x05\x7d\x41\xbe\x08\x2a\xff\x1b\x44\x44\x22\x66\xc1\x1e\xb0\xb2\x78\x2a\xf8\x4e\x67\xbc\xf2\xb1\xdb\x26\x92\x0d\xea\x8a\xe4\xdf\xfa\xa1\x12\xb6\x8c\xe2\xd8\x79\x9a\xa6\xf0\x7f\x29\x6c\x9f\x34\x6c\x44\x55\x81\x2d\xf5\x06\xdc\xd8\x01\x27\xe2\x59\x89\x39\x90\x06\x2a\x51\x18\xc8\xb4\x31\x68\xd7\x5a\xe5\x42\x15\x80\x2d\xb1\x46\xdd\x33\xdc\xe1\xb7\xbe\x3c\x3d\xd9\x8f\x0c\x69\x3a\x18\x1d\xc0\x41\xb9\x41\x93\xce\xd3\x07\x84\x5a\x89\x6f\x35\xb2\x00\xa7\x9d\x55\x49\xdb\x74\x28\x94\x25\xae\x32\x1c\x4f\xc3\x11\x84\x59\x6d\x49\xcb\xf0\xa4\xfa\x69\x0a\x8b\x3c\x87\xa5\x5b\x48\xef\x85\x33\x2a\x59\x54\x15\x3c\x3f\x37\xdf\xfe\xaa\x31\x05\xa7\xc9\x22\xcf\xfd\x41\xe4\x57\xd8\x4f\x44\x68\xd0\x12\x37\xe4\x4a\x59\xe2\x54\xdb\x30\x6e\x55\x6f\xd1\x6f\x95\x0b\xd6\x66\x0b\x82\x50\x9e\x2e\xd3\xc5\xb4\x95\xee\x91\x0e\x67\xb7\x84\xb2\xeb\xca\x15\x7a\x6a\x46\xcd\x7d\xfe\x9e\x4c\x92\x69\x38\xac\xf8\x97\x7f\x27\x4e\x57\x6a\xee\x9a\x8e\x64\xa7\x1e\x4e\x5d\x37\xcd\xe5\x3d\x52\x14\x5e\x7b\xd9\xee\xfd\xe6\x38\xf8\x17\xea\xb9\x74\x47\xb3\xc9\x89\x42\xab\x25\x8e\xdd\xbc\x84\x23\x98\x4e\x26\x93\x11\x34\xcf\x55\x72\xb3\xf8\x74\xb3\xec\x08\xb6\xfe\x72\xa5\xa9\x44\xd3\xfa\xcc\x02\x9c\xbd\xe5\xe4\xec\x9c\x93\x3f\x21\xea\xec\x32\x51\xaf\x7e\x88\x7a\x56\xc5\x8e\x39\xce\xde\xa1\xe2\xec\x35\x15\x67\xa7\x55\x3c\xbb\xb4\x5c\x6d\x4f\x2e\x2e\x94\xda\x12\x6c\x4a\x34\xe8\x7f\x79\x81\x8a\x40\x58\x30\xb5\x52\x42\x15\x27\xf7\x77\xf0\x9c\xbc\xbd\xbc\x55\x17\xda\xd8\xd8\xcf\xbd\x78\xdd\x7a\x68\x1f\xb5\x77\xfd\x92\x1f\xb3\x80\x87\xc9\xe9\x97\xbe\x70\x84\x1c\xce\x6b\x23\x74\xf5\xea\x08\x79\xaf\x87\x50\x8e\x8b\x36\xde\x4a\xb1\xf2\xc4\x7e\x99\x83\x12\x95\xa7\xea\x43\xdb\x99\x75\x00\xdf\x03\x00\x00\xff\xff\x1b\xe6\x3e\x2c\x49\x09\x00\x00")

func resourceTmplSrcIntegrationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegrationGoTmpl,
		"resource/tmpl/src/integration.go.tmpl",
	)
}

func resourceTmplSrcIntegrationGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegrationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration.go.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1515402576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegration_testGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x4f\xe3\x30\x10\x3d\xc7\xbf\xc2\xf2\x29\x59\x05\x87\x72\xac\xb4\x07\x16\x55\xa8\xd2\xc2\x01\x8a\xf6\x50\x55\x8b\x49\xa7\xa9\xa1\xb1\x8b\x3d\x01\xaa\xaa\xff\x7d\x65\x3b\x6d\x12\x5a\x90\x16\x81\x56\xda\x13\xd4\x99\xf7\xe6\xcd\xc7\xb3\x97\x22\x7f\x10\x05\xd0\x52\x48\x45\x88\x2c\x97\xda\x20\x8d\x49\xc4\x40\xe5\x7a\x2a\x55\x91\xdd\x5b\xad\x18\x89\x18\x82\x45\xa9\x0a\x46\x48\xc4\x0a\x89\xf3\xea\x8e\xe7\xba\xcc\x14\x3c\x1b\x58\xc8\x3c\x93\x6a\x66\xc4\x91\x54\x08\x85\x11\x28\xb5\xb2\x47\x76\xfa\x90\x4d\x05\x8a\x0c\x9e\x40\x21\xfb\x00\xb0\x04\x34\x32\xff\x4b\x64\xeb\xe0\x15\xd2\xa2\x01\xcc\xe7\x26\xf3\xc5\xcc\x56\x99\xb0\x16\x0c\x32\x92\x10\x32\xab\x54\x4e\x47\x60\x71\xe0\xc4\xc6\x48\xbf\xd5\x15\xf3\x51\x42\xd7\x24\xca\x32\x3a\x54\x2e\x9a\xce\xc1\x00\xc5\x39\xd0\x85\x2e\x64\x4e\x67\xda\xd0\x95\xae\x0c\x75\xf1\x96\x90\x48\xa6\x14\x8c\xa1\xfd\xef\xb4\xa5\x84\x5f\xc2\x73\xec\x9b\xc8\x52\xca\x7a\xfc\x98\x1f\xb3\x84\x44\x41\x00\xbf\xd4\x03\x63\xb4\x89\xd1\x43\x13\x42\x22\x68\x48\xf8\x40\xa1\xc4\x55\x40\x87\xff\x1d\x87\xfb\x75\x29\x4a\xb0\x4b\x91\xc3\xfb\x5c\xfc\x74\x3a\x0d\x65\xf9\x49\x34\x5a\xae\xab\xb2\x14\x66\x47\x77\x26\x10\x0a\x6d\x56\x2c\x71\xb0\x9a\x6f\xf0\x58\x89\x85\x67\xe3\x9e\xc3\x8e\x8f\x27\xbc\x06\xd6\xb8\x2d\x4d\xf2\x3e\x68\x4b\xbf\x97\x6d\x1f\xd6\x4b\xe9\x02\x54\xbc\x45\x3b\x3d\x9b\xd6\x8c\x2e\xfc\x5e\xd8\xff\x6a\x4a\xe5\x8e\x0b\x9c\x8c\x50\xe2\x35\x60\x60\xac\x2b\x7e\x9f\x81\x5f\x43\x1d\xd8\x06\xf5\x98\xef\x67\xf0\x12\x3f\x3f\xbd\x39\x1f\x24\x6f\x06\x9f\x38\xd1\x33\xad\xd9\x0e\x70\x3a\x1a\x5d\x0d\x7f\xdc\x8c\x06\x3e\x45\x90\xe1\x54\x96\xbc\xd6\x74\x70\x7a\x75\xe0\xb8\xa3\x63\x72\x60\xd2\x9d\x64\x9d\xf8\x13\x17\xdf\x19\xfb\x99\x01\x81\xf0\x53\xe7\x62\x51\x77\x7b\x6f\x01\x3e\x65\xac\x92\xb7\x73\x24\x24\xba\xdf\xb1\xba\xeb\x90\x5f\x08\x63\xe7\x62\x11\xcb\x43\x36\xb9\x5d\x33\x25\x4a\x60\xfd\x3a\x21\x5b\x1a\x8d\x3a\xd7\x8b\xdf\x4f\x60\xac\xbb\x94\xfa\xec\x84\xa5\xac\xa5\xaf\xf5\x25\x88\x4b\x99\xbb\xfe\x58\x7f\xbc\x66\x75\x63\x58\x7f\x3c\x71\x18\x67\x07\xe7\x99\xfe\x7a\x93\x32\xef\x66\xff\x69\x33\xd9\xdc\xa6\xd4\xa2\x91\xaa\x88\xef\x5f\xdb\x25\xf4\xed\x0a\x4a\x8d\xf0\xa5\x8d\xfb\xb8\x1f\x9a\x7d\xe8\xc4\x83\x5b\x32\xe1\x9a\xc1\x1d\xea\xad\xf8\x86\x71\x0f\xe2\x8f\x9d\xb6\x7f\x38\x43\x08\xe5\xf4\x3b\xac\xdb\x1a\x19\xae\x96\xdb\xb3\xa6\x8e\x4d\xfa\x89\x93\x6f\x6d\xf3\x2f\x89\xf3\xe1\x96\xeb\xab\xb6\x20\x2c\x40\xd7\x43\xee\x19\xda\x25\x76\x77\xcf\x10\xa1\x8c\x6b\xf7\xb3\x3b\x61\xdc\x9f\xc7\xaa\x7a\x61\xde\x81\x4e\xc8\x8b\xb4\x68\xc3\x85\xd8\x20\x1b\xd8\xa1\xd7\xc6\x43\x52\x8a\xa6\x3a\xb8\x2b\x9e\x3f\xa5\x52\x8e\x7d\xc6\xc9\xa1\xd9\x87\x77\xa7\x9b\xd0\xc6\x49\x92\xd2\x9e\x6f\xee\x9f\x00\x00\x00\xff\xff\x41\xdc\x5f\xfb\x33\x09\x00\x00")

func resourceTmplSrcIntegration_testGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegration_testGoTmpl,
		"resource/tmpl/src/integration_test.go.tmpl",
	)
}

func resourceTmplSrcIntegration_testGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegration_testGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration_test.go.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1500880295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplVendorVendorJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd5\x4b\x6f\xa3\x3c\x14\x06\xe0\x35\xfc\x8a\x4f\x6c\xdb\x7c\x60\x1b\x07\x13\x69\x16\x6d\x93\x26\x4d\xaf\x49\x88\xa2\x30\x9a\x85\xb1\x0d\x38\x5c\x9c\x1a\x72\x19\xaa\xfe\xf7\x11\x9d\x59\x8c\x46\x33\xdd\xb0\x61\xc9\xab\x73\x5e\xe9\x61\x71\xfc\x66\x1a\x16\x53\x45\x21\xca\xda\x1a\xfd\x67\x59\x97\xa6\x61\xc9\xa4\x54\x5a\xb4\x9f\xb5\xa8\xea\x8f\x68\x4f\x59\x46\x93\x36\xfb\x6a\x1a\xc6\x9b\x69\x18\x86\xc5\x52\xc1\xb2\xea\x50\xac\x66\x57\xa0\x1d\x2e\x37\xfe\x31\x5e\xde\x5f\xc0\xf3\xc5\x38\x8b\xa6\xc8\x3f\xac\x8a\x3b\x7b\x33\x57\x8a\x7d\x69\x4b\x8c\xb6\xa6\x4e\xdb\xd1\x44\xd6\xe9\x21\xfa\x9f\xa9\xc2\x2e\xc5\x49\x8b\x5c\x32\x5b\x96\xb1\xa6\x03\x59\xd6\x22\xd1\xb4\x96\xaa\xac\x06\x15\xcf\x6c\xaa\x93\xea\xd7\xb6\x16\x47\x59\x49\x55\xb6\x0d\x08\x90\x98\x79\x78\xe8\x43\x82\x44\x44\xd9\x90\x79\xcc\x43\x5e\xe4\x92\x28\xf2\x62\x3f\x62\x18\x3a\xd8\xf7\x9c\x3f\x56\x03\x59\x7c\xc0\xa0\x03\xc8\xc0\x71\x07\xd0\x0b\x00\x1e\xb9\xde\x08\x39\xa1\x65\x1a\xc6\xfb\xe5\x3f\x79\xf7\x34\x7c\x58\x71\x7b\xbe\x0e\x1b\xbb\x78\x8d\x37\x68\x77\xcb\xc1\x0e\x2e\xf8\xe6\xaa\x03\x8f\xd3\x9a\xda\xe2\xd8\xfe\xfe\x3e\x20\xd5\xed\x3c\x45\x41\x9a\x6c\xa7\x6c\xbd\x9e\xf9\x13\x19\x63\xfe\xbc\x07\xd3\xc8\x25\x5d\x91\xb2\x6c\x95\x4a\x7f\xef\x05\xf4\x11\x5f\xdf\x37\xc1\x7a\x92\x70\xe8\x5e\x9c\xa6\xe7\x00\x3f\xf9\xf1\x89\xac\x74\x53\x75\x85\x16\xa2\xd6\x92\xf5\x42\xf9\x7a\xc7\xb4\x08\x29\x89\x57\xce\x78\x48\xd9\x3c\x7c\x99\x69\x95\xa3\xf3\xcd\x74\xd1\x41\xf9\x5b\xd0\x0b\xe5\x78\x17\x21\xfd\xd2\xac\x73\x27\x4f\xf6\x13\xf8\xa4\xcb\xe5\xe4\xdc\xa4\xc7\xb1\x3a\x75\x50\xe6\x2a\xe9\x85\x4e\x3e\x23\xba\xb8\x3b\x2f\x9b\x1b\xa1\xb6\xb3\xed\xcc\x95\xac\xce\x92\xdd\x63\x68\x4f\x3a\xe8\xf6\x42\x57\xb2\xea\xc7\xd1\xc9\x77\x1c\xdd\xa6\xdb\xe5\xdc\x07\xec\x21\x6c\xd0\xa9\x9a\xf9\xd7\x8b\x05\x9c\x47\x9f\x5d\xd6\x7d\x96\xd8\x42\x6b\xa5\xff\xf6\x3c\x10\x30\x64\xbe\x43\x30\x1e\x42\xc6\x3d\x21\x1c\x24\xbc\x98\x00\x42\x28\x60\x31\xf7\x5d\x48\x30\x61\x5c\xf0\x4f\x11\x68\x00\x40\x00\xc1\xc8\xc5\x23\x80\x7f\x22\x4c\xe3\x9b\xf9\x6e\xfe\x08\x00\x00\xff\xff\xad\x89\xd9\x2f\x35\x07\x00\x00")

func resourceTmplVendorVendorJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplVendorVendorJsonTmpl,
		"resource/tmpl/vendor/vendor.json.tmpl",
	)
}

var _resourceTmplGometalinterJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x72\xcd\x4b\x4c\xca\x49\x55\xb2\x52\x88\x56\x4a\x49\x4d\x4c\x49\xce\x4f\x49\x55\xd2\x51\x50\x4a\x2d\x2a\x4a\xce\x48\x4d\xce\x06\xb1\xd3\xf3\xd3\x72\x4b\x20\x8c\x9c\xcc\x3c\x28\x2b\x33\xb7\x20\xbf\xa8\xa4\x58\x29\x56\x07\x64\x4a\x58\x6a\x5e\x4a\x7e\x91\x92\x95\x42\x49\x51\x69\x2a\x58\xc4\xb5\x22\x39\xa7\x34\x05\x62\xb0\x9e\x9e\xbe\x9e\x9e\x7e\x19\x44\x4d\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\x4d\xab\xfc\x58\x7a\x00\x00\x00")

func resourceTmplGometalinterJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplGometalinterJsonTmpl,
		"resource/tmpl/.gometalinter.json.tmpl",
	)
}

func resourceTmplGometalinterJsonTmpl() (*asset, error) {
	bytes, err := resourceTmplGometalinterJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/.gometalinter.json.tmpl", size: 1880, mode: os.FileMode(420), modTime: time.Unix(1515403721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

func resourceTmplVendorVendorJsonTmpl() (*asset, error) {
	bytes, err := resourceTmplVendorVendorJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/vendor/vendor.json.tmpl", size: 1880, mode: os.FileMode(420), modTime: time.Unix(1515403721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/tmpl/CHANGELOG.md.tmpl":            resourceTmplChangelogMdTmpl,
	"resource/tmpl/LICENSE.tmpl":                 resourceTmplLicenseTmpl,
	"resource/tmpl/Makefile.tmpl":                resourceTmplMakefileTmpl,
	"resource/tmpl/README.md.tmpl":               resourceTmplReadmeMdTmpl,
	"resource/tmpl/configuration.yml.tmpl":       resourceTmplConfigurationYmlTmpl,
	"resource/tmpl/definition.yml.tmpl":          resourceTmplDefinitionYmlTmpl,
	"resource/tmpl/src/integration.go.tmpl":      resourceTmplSrcIntegrationGoTmpl,
	"resource/tmpl/src/integration_test.go.tmpl": resourceTmplSrcIntegration_testGoTmpl,
	"resource/tmpl/.gometalinter.json.tmpl":      resourceTmplGometalinterJsonTmpl,
	"resource/tmpl/vendor/vendor.json.tmpl":      resourceTmplVendorVendorJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resource": {nil, map[string]*bintree{
		"tmpl": {nil, map[string]*bintree{
			"CHANGELOG.md.tmpl":      {resourceTmplChangelogMdTmpl, map[string]*bintree{}},
			"LICENSE.tmpl":           {resourceTmplLicenseTmpl, map[string]*bintree{}},
			"Makefile.tmpl":          {resourceTmplMakefileTmpl, map[string]*bintree{}},
			"README.md.tmpl":         {resourceTmplReadmeMdTmpl, map[string]*bintree{}},
			"configuration.yml.tmpl": {resourceTmplConfigurationYmlTmpl, map[string]*bintree{}},
			"definition.yml.tmpl":    {resourceTmplDefinitionYmlTmpl, map[string]*bintree{}},
			"src": {nil, map[string]*bintree{
				"integration.go.tmpl":      {resourceTmplSrcIntegrationGoTmpl, map[string]*bintree{}},
				"integration_test.go.tmpl": {resourceTmplSrcIntegration_testGoTmpl, map[string]*bintree{}},
			}},
			"vendor": {nil, map[string]*bintree{
				"vendor.json.tmpl": {resourceTmplVendorVendorJsonTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
