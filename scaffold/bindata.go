// Code generated by go-bindata.
// sources:
// resource/tmpl/CHANGELOG.md.tmpl
// resource/tmpl/LICENSE.tmpl
// resource/tmpl/Makefile.tmpl
// resource/tmpl/README.md.tmpl
// resource/tmpl/configuration.yml.tmpl
// resource/tmpl/definition.yml.tmpl
// resource/tmpl/src/integration.go.tmpl
// resource/tmpl/src/integration_test.go.tmpl
// resource/tmpl/vendor/vendor.json.tmpl
// DO NOT EDIT!

package scaffold

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceTmplChangelogMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x65\xa1\x43\x9d\xb2\x76\xab\x60\xa9\x80\x85\x7f\x42\xaa\x18\x1c\xfb\x9a\x18\x9c\xbb\xc8\xbe\x06\xa1\xaa\xdf\x1d\xb5\x01\x95\x8e\xf7\xd3\xe9\xbd\xdf\xab\x70\xd3\x39\x6e\x09\xf7\xd2\x1a\xb3\x4a\x09\x2c\xea\x9a\x44\xf0\x27\x5e\xa0\x02\xed\x62\xc1\x90\xe5\x83\xbc\xe2\x2b\xa6\x84\x86\x10\xc4\xef\x7a\x62\xa5\x80\xc8\xd3\xcb\x36\x26\xb2\xc6\x3c\x77\x84\xad\xe4\xde\x29\x62\x41\xe3\x0a\x05\x08\x63\x73\x47\x34\xc0\xfd\x16\x26\x69\xdf\xaf\x3a\xd5\x61\x59\xd7\x9f\x44\x83\xf3\x7f\xd8\x7a\xe9\xeb\x99\x71\x1c\x2e\x8b\x5d\xe8\x28\x4f\x42\x9b\x27\xea\x1d\x6b\xf4\x78\xa5\x5c\xa2\x70\xe4\x73\x5a\xa1\x7e\xa4\x6c\x25\xb7\xf5\xcc\x1a\x53\x55\x78\xe1\x4c\x89\x8e\x1e\xa6\xaa\x2a\xac\x42\xa0\x60\xe6\x78\x33\xa7\x73\xf2\xf9\x07\x1e\xa9\x97\xf1\x0c\xb0\xb0\xd7\x76\x81\x39\xf6\x7b\x7b\xeb\x94\x0e\x87\x8b\x94\x35\x47\x8d\x2e\x61\x9c\x4c\x96\x58\xb3\x4f\xbb\x40\x05\x0f\xa4\x39\xfa\x82\xe3\x92\x35\x8f\xc4\x2a\xf9\x1b\xc1\xa9\xfb\x09\x00\x00\xff\xff\xe2\x7a\x94\x62\x76\x01\x00\x00")

func resourceTmplChangelogMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplChangelogMdTmpl,
		"resource/tmpl/CHANGELOG.md.tmpl",
	)
}

func resourceTmplChangelogMdTmpl() (*asset, error) {
	bytes, err := resourceTmplChangelogMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/CHANGELOG.md.tmpl", size: 374, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplLicenseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf1\x77\xf1\xb7\x52\xf0\xcc\x4b\xce\x29\x4d\x49\x55\x48\x54\xc8\xc9\x4c\x4e\xcd\x2b\x4e\xd5\x03\x04\x00\x00\xff\xff\xe9\xb7\xf2\x07\x18\x00\x00\x00")

func resourceTmplLicenseTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplLicenseTmpl,
		"resource/tmpl/LICENSE.tmpl",
	)
}

func resourceTmplLicenseTmpl() (*asset, error) {
	bytes, err := resourceTmplLicenseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/LICENSE.tmpl", size: 24, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\x36\xff\x8a\x83\xea\x07\x6b\x98\x68\xec\x55\x85\x87\x78\xab\x97\x19\xeb\x1c\xa3\x76\x07\x14\x6d\x91\xd2\xd2\x89\x26\x42\x91\x02\x49\xcb\xce\xba\xfe\xef\x03\x29\x5b\x96\xdc\x22\x31\x86\x61\x98\x1e\x22\x85\xf7\x1d\xef\xbb\x2f\xf7\x23\xf3\xc5\x7a\x76\xfb\x66\xba\x9e\xdf\x2d\x00\xd2\x09\x0c\x47\x76\x8b\x52\xc2\x86\x59\x54\xac\xc4\xf6\xa0\xda\xe7\x71\x4c\x7e\x9a\x2f\xa6\x6f\xde\xdd\x2f\xa6\xbf\xcf\x00\x60\x02\x9f\x3f\xd3\xb9\x72\xc8\x0d\x73\x42\x2b\xfa\xb3\x2e\x2b\xa6\x1e\x97\x06\x0b\x71\xf8\xf2\x25\x19\x8e\x3a\xf7\xc7\xe4\xf6\xee\x7e\xf9\xdb\xed\x0a\xc2\xd3\x09\xc6\x35\x48\x61\x1d\xd0\x31\xa5\x14\xfe\x02\x6e\xb0\x82\xa4\x86\x68\x5c\xa3\xca\xb5\x19\x47\xc1\xf7\x97\xf9\xeb\xd9\xea\xd2\xb7\x10\x2a\x07\x6b\x32\x48\xdc\x63\x85\x50\x40\x12\x68\x47\xdf\x51\xae\xa3\x98\xfc\x31\x7d\x3d\x7f\x35\x5d\xcf\xee\x5f\xcd\x96\x2b\x98\x00\x17\x6e\xbb\xdb\xd0\x4c\x97\x63\xae\x25\x53\x7c\x2c\x85\x72\xfe\x5b\x28\x47\x02\xa8\x7d\x7a\xe8\x07\x66\x72\xc1\x94\xb6\x63\xae\x1b\x56\x64\x3d\x5b\xad\xef\x5b\x97\x1e\x9a\x1d\xf6\x63\xae\x33\x5d\x37\x3f\xbb\xa6\xa9\xc4\x87\x95\x68\xce\x93\x43\x29\x09\x61\x52\xa6\xb0\xd9\x09\x99\x13\x12\x5e\x29\x64\x12\x99\x82\x9a\x49\x91\x33\x87\x90\xe9\xb2\x12\x12\xc1\xa1\x75\x84\x04\x63\x7a\x62\x49\x06\x37\x98\x6d\x35\x44\x93\x89\x57\xa5\x2b\x38\xf8\xa3\xf7\xc7\xcb\x3e\xa6\x60\xb0\xd4\xb5\x50\x1c\x36\x42\x31\x23\xd0\x02\x53\x39\x64\xba\x46\xc3\x38\x42\x21\x24\x52\x4a\x23\x32\xb8\x31\x25\x24\xa6\xa8\x3d\xb0\xb5\xd3\x40\xf6\xc4\x29\xc9\xb1\xb2\xe9\xf3\xc1\x7b\x78\x4f\x42\x28\xeb\x98\x94\x9e\xc6\xd1\x26\xb4\x82\x1c\x2b\x54\x39\xaa\x4c\xa0\x3d\x72\xe0\x1a\x38\x3a\x5f\x07\xc3\x51\xef\xcf\x18\x77\x58\x68\x25\x1f\x3d\x8b\xca\x08\xe5\x8a\x2b\x78\x04\x1d\x76\x4a\xf9\xf8\x5c\x17\xa5\xf3\x25\x17\x91\x17\xf0\x29\xfc\xf6\x09\xf0\x50\x61\xe6\x6c\x50\xc3\x06\xb6\xc8\x72\xd0\x05\x54\x2c\x7b\x60\x1c\x2d\xf5\x50\x08\xd8\xbd\x36\x0f\x16\xf6\xc2\x6d\xc9\x8b\xd6\xfe\x3d\x6c\x76\x0e\x0a\x6d\x32\xb4\x90\x48\x48\xf6\x50\x48\xc6\x2d\x25\x83\x9b\xbb\xb7\xeb\xe5\xdb\xf5\x24\x3a\x57\x7e\x51\x3a\x0f\x1a\x8e\x4e\x05\x1e\xc7\x11\xbc\xfc\x40\x06\xa2\x80\xf7\x90\xfc\x09\xd1\x70\xd8\x78\x45\xf0\xf1\x25\xb8\x2d\x2a\xf8\x40\x06\x83\x46\xf6\x8a\x59\x8b\x39\x6d\x3c\x50\x5a\xec\xd8\x0a\x26\x24\xe6\x14\xe6\x2a\xd3\xc6\x60\xe6\xc0\x3e\x2a\xc7\x0e\x20\x94\xbf\x06\x0a\x2d\xa5\xde\x7b\x1d\x42\xaa\x69\x73\xc9\xd1\xf9\x1c\xb4\x39\x3c\x08\x07\x3f\x84\xef\x42\xfc\x73\xb9\x7d\x93\x35\x7a\x7f\x4b\x0a\x6f\x6d\x84\xf0\x53\xe2\xdf\xd7\xc1\xda\x1d\x5a\x28\xf4\x4e\xe5\xff\x45\xb2\x50\xe3\x13\xc9\x7a\xeb\xff\x27\xd9\x63\xae\x6d\x5f\xa5\x17\x7d\xdb\xeb\x37\x42\x8e\xf3\xe8\xda\x19\xd0\x85\x5f\x8c\x80\x30\xef\x9e\xe8\xfe\xe1\xa8\xe9\x78\x7f\xd0\x8c\x5d\x5f\xc5\xd9\x99\xc2\x69\x00\x5c\x47\xc1\x47\x0f\x21\x7d\xec\xe1\xa8\xb3\xce\xe2\x73\xdc\x86\x53\xa2\xfd\xf4\x1b\xf7\x41\xdd\x3e\x6d\x39\xa4\xfd\x04\xbb\xcc\x08\xf1\x23\xbb\xd1\xa9\x87\x7a\x9e\x71\xeb\x78\xa1\x98\x3f\xf7\xef\x67\x26\x66\xbb\x9c\xe2\x23\x87\x2b\x85\xf2\xd8\x6e\x1d\xef\x94\x70\xe1\xf0\x1c\xc4\x2f\xb4\x00\x3b\x97\xaf\x5f\xda\xa7\x85\x06\x3f\x5e\xac\x0c\x8f\x4d\x3b\xf9\xb4\x74\x08\xa1\xcb\x5f\xef\x16\xef\x52\x60\xfe\x5f\x8e\x20\x7b\x7f\xf3\x7d\xa3\xfa\xbe\xda\x8a\x5f\xab\xde\xdb\x97\x17\x31\x9b\x1d\xfa\x77\x00\x00\x00\xff\xff\x94\x8b\xbc\xee\xf7\x08\x00\x00")

func resourceTmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplMakefileTmpl,
		"resource/tmpl/Makefile.tmpl",
	)
}

func resourceTmplMakefileTmpl() (*asset, error) {
	bytes, err := resourceTmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/Makefile.tmpl", size: 2295, mode: os.FileMode(420), modTime: time.Unix(1509711082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplReadmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x07\xbc\x33\x0c\x1f\xc0\xdb\x3a\x0b\x6f\x52\x20\x46\x0f\x30\x26\x47\xf2\xa0\x14\xc9\x0e\xc9\xc8\x46\x90\xbb\x17\xa6\x95\x86\x31\xd0\xec\x04\x7d\xcc\xcc\xfb\x4f\x5a\xe1\x99\x67\xbc\xb0\x17\x8b\x43\x18\x94\x72\xd1\x6a\x4b\x55\xc6\x21\x14\x1e\x95\x8a\xc4\x80\x21\x2a\xde\xde\xb0\xed\xde\x6d\x9f\x69\x62\xbc\xbf\x1b\xf3\x18\xec\x39\x5b\x95\xd4\x06\x6f\xf9\x6a\x85\x17\xfe\x53\x45\x79\xe2\x50\xb2\x31\xfb\x68\xeb\xed\x11\x32\xa0\x9c\xbf\x5e\x3a\x53\x46\x8e\x13\x23\x27\xb6\x42\x1e\xfa\x39\xba\xc5\xd3\x65\x87\x43\xc8\x85\xbc\x97\x30\x82\x82\xe1\x4b\x51\xc2\x14\x5d\xf5\xbc\x41\x62\x9d\x24\x67\x89\x21\xa3\x44\xf0\x85\x6d\x2d\x0c\xc2\x49\x02\xe9\x75\x03\x2e\x76\xdb\x88\x7e\xc4\x30\xc8\x58\xef\x57\xbf\x47\x0a\xcc\x6e\x81\xb2\xfd\x54\xb3\xa2\x35\x04\x09\xe3\x1d\xed\xc8\xc5\xd4\xd4\x53\x6c\x40\xce\x81\xfe\xb5\xa9\x99\xb5\xa3\x58\xba\x7c\x40\x34\x71\x27\x6e\x04\xd2\x45\x48\x1a\x2d\xe7\xdc\x2e\x3e\xe0\xdd\x17\xfd\xca\x34\x72\x57\x63\xa2\xe0\xa8\x44\xbd\x82\x82\x43\x6c\x1f\x83\x3c\x48\xc7\x96\xe7\x9e\xfd\x71\xe3\xa6\xcd\x9c\xe3\xdc\x2b\x94\xf2\xe1\x6d\x4a\x54\xe4\x24\x5e\xca\xd5\x98\x35\x8e\x35\xa5\xa8\x85\x1d\x7e\x1e\x77\x30\xeb\xff\xfd\x27\x78\x65\x6d\x4a\x76\x66\x8d\x27\x27\xb7\x6c\x87\xc5\xc2\xa7\xec\x3d\xbf\xb2\x8f\xa9\x95\xa8\x4b\xa9\x5e\x8b\xeb\xf2\x39\xea\xef\xc1\xc7\x79\xd1\x22\xf9\x8b\x97\xbf\x01\x00\x00\xff\xff\x77\x10\x79\x9a\xdb\x02\x00\x00")

func resourceTmplReadmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplReadmeMdTmpl,
		"resource/tmpl/README.md.tmpl",
	)
}

func resourceTmplReadmeMdTmpl() (*asset, error) {
	bytes, err := resourceTmplReadmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/README.md.tmpl", size: 731, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplConfigurationYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x79\x01\x0b\x5e\x43\x11\x62\x8d\x1a\x28\x11\x6a\xf5\x5a\xc6\x3a\x94\x60\x33\x91\x34\x0a\xa5\xf4\xdd\xa5\x7f\xdc\x5d\xd8\xc3\x5e\xf6\xfa\x7d\xbf\xf9\xe6\xe7\x38\x51\x17\x31\xb9\xc0\x0d\xa3\x27\x09\x6d\xf0\xd9\x34\x41\x66\x8e\x4d\x56\x04\xff\x8d\x3c\x5a\xf4\x04\xf3\x7c\x56\xef\xb9\x10\x8e\x87\x84\xdc\xd2\x20\x05\xc0\x0d\x6c\x83\xb9\xb1\xaf\xb5\xb2\x85\x06\xf3\xa0\x6d\x6d\x1e\x8d\xae\xee\x04\x00\x2c\xaf\x3c\xf2\xa7\x04\x4f\x29\xba\x76\x58\x43\x8c\xdd\x8f\x27\x4e\xeb\xc6\x1e\xdc\x4a\xc8\x55\xf5\xd4\xbc\xab\xf2\x4d\x6f\xb7\x3d\x7e\x50\x7f\x60\xbe\x68\x5c\x98\x52\xdd\xeb\xf2\x9f\x3a\x55\x78\xa9\x9f\x75\x05\x97\x45\x1c\xff\x12\xa7\x10\xc7\xeb\xaa\xfc\x05\x00\x00\xff\xff\x13\x20\xb7\xd8\x66\x01\x00\x00")

func resourceTmplConfigurationYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplConfigurationYmlTmpl,
		"resource/tmpl/configuration.yml.tmpl",
	)
}

func resourceTmplConfigurationYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplConfigurationYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/configuration.yml.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplDefinitionYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x6a\x86\x30\x10\x84\xef\x3e\xc5\xbe\x80\xf1\xee\xb1\xed\xc5\x4b\x5b\x28\xf4\x5a\xd2\xb8\x2d\x01\xb3\x1b\x36\x41\x2a\xe2\xbb\x97\xc4\xe8\x0f\xea\xe1\x3f\xfc\xb7\x64\xe6\x9b\x61\x12\xd2\x0e\x5b\x30\xec\xd4\x3c\x83\xea\x28\xe2\xaf\xe8\x68\x99\xd4\x33\x3b\xaf\x69\x7a\xd5\x0e\x61\x59\x4e\x76\xd1\xab\x1e\x83\x11\xeb\x93\xd6\xc2\x11\x7a\xb9\x99\x89\xf5\xc2\x91\x0d\x0f\x5f\x23\x4a\xb8\x0c\xbc\x17\xe2\x73\x05\x52\x88\xc3\x19\x7b\xfb\x48\x4e\x65\xd8\x39\x4d\x7d\x68\x2b\x00\x87\x51\xac\xc9\x47\x80\x62\xac\x17\x80\x1a\x54\xf3\x6d\xa9\x39\xd6\x3c\x59\xd2\xb2\xbd\x70\x67\xeb\xba\x74\x65\xc5\x52\x44\x19\xf5\x70\x1e\xd1\x15\x27\x4f\x49\xe0\x88\x14\x59\xa6\x87\x4c\xd8\xdb\xb2\xe6\x05\x7f\xec\xdf\xd5\x77\x25\x7d\x4b\xde\x37\xf5\x3f\x00\x00\xff\xff\xc2\xf0\xf0\x76\xf2\x01\x00\x00")

func resourceTmplDefinitionYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplDefinitionYmlTmpl,
		"resource/tmpl/definition.yml.tmpl",
	)
}

func resourceTmplDefinitionYmlTmpl() (*asset, error) {
	bytes, err := resourceTmplDefinitionYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/definition.yml.tmpl", size: 498, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegrationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x1f\x0f\x1f\xa4\xc2\xa6\xed\x6b\x80\x1c\x8c\xd6\x0d\x0c\xb4\x41\x80\xb4\xbd\x33\xf2\x4a\x26\xcc\x1f\x75\xb9\x8a\x6b\x24\x7e\xf7\x82\x52\x6a\xc9\x69\x5a\xc0\x40\x6f\xc4\x72\x77\x38\xb3\x33\x6c\x74\xb9\xd3\x35\x82\xd3\xc6\x0b\x61\x5c\x13\x88\x21\x17\x59\xdc\xec\x96\x54\x47\x90\xb5\xe1\x6d\xfb\xa0\xca\xe0\x66\x1e\xf7\x84\xd6\x94\x33\xe3\x2b\xd2\x53\xe3\x19\x6b\xd2\x6c\x82\x8f\xd3\xb8\xd9\xcd\x34\xd5\x51\x8a\xec\x92\x11\x1b\xea\x0b\x27\x1c\x32\x99\xf2\xc2\xa1\xb8\xd9\x49\x51\x08\xc1\x87\x06\x41\x53\xdd\x3a\xf4\xfc\xc9\x44\x86\xc8\xd4\x96\x0c\x4f\x27\xc5\xea\x03\x56\xba\xb5\xbc\x1c\x75\x89\xa3\x10\x65\xf0\xb1\xdb\xcc\x08\xfc\x56\x3b\x04\x00\xb8\x06\x59\x06\xa7\x9e\x9e\xd4\x7a\xb8\x54\xef\x83\x6b\xb4\x3f\xa4\xa6\xe3\xf1\xf5\x65\x5f\x95\x67\x70\xdf\x90\xa2\x09\x3e\xc1\xcd\xd5\x42\xcd\x3b\xca\x8f\x9a\x12\xe3\x78\x46\x5b\x88\xaa\xf5\x25\x34\xa1\x69\xad\x66\x5c\xfb\x47\xf4\x1c\xe8\x90\x9b\x5f\x27\x88\x9b\x9d\x3a\xd5\x0b\x40\xa2\x40\x49\xe6\x6c\x06\x6b\x1f\x91\x18\xb6\x48\x08\xbc\x45\xb0\xa1\x36\x25\x84\x0a\x0e\xa1\x25\x18\x11\x02\x0e\x50\x23\x77\x4d\x03\xf2\x46\xb3\xee\x70\x56\x3f\xae\x86\xb2\xba\x47\x5e\x33\xba\x5c\xc6\x50\xf1\x5e\x13\xbe\xc8\x91\x13\x90\x8f\xda\xb6\x98\x0e\x0b\x35\x57\x0b\x59\x74\xe3\xd3\xa9\xc8\x08\xb9\x25\x0f\xde\xd8\xb4\xe3\x33\x51\x9f\x3b\xa3\x63\xee\x22\xbc\xeb\x4d\x57\x7d\xe9\x1e\xf9\x1f\xe8\xe9\x21\xe3\xb9\x1a\x17\x93\x8c\xfe\x99\x5c\x12\x7e\x6f\x31\x72\xbc\x43\xba\xc7\x32\xf8\x8d\x9c\xc0\x62\x3e\x79\x19\x55\x37\xcb\xaf\x37\xab\xbf\x4a\x49\x9f\x2a\x2f\x12\xcb\x11\x89\x49\xe2\x0e\x57\xd7\x9d\x43\xb7\xb8\x1f\xa5\x22\x7f\x95\xad\x09\xfc\x9e\x8e\x09\xfc\x9f\xe2\x50\x88\xac\xd2\xac\xed\xba\x5a\x11\xe5\x48\x54\x08\x91\x99\xaa\x8b\x8a\x5a\x5a\x0b\xcf\xcf\xfd\xf9\x94\x81\x44\x63\x3c\xf3\x56\x78\x86\x7c\x0e\xd1\x29\x44\x76\xfc\x03\xf6\x8b\x45\x1d\xb2\x8b\x49\xd3\x18\xe2\x16\xf7\x27\xc3\x72\xf9\x2a\xff\xab\x04\xff\xe5\xd0\xa4\x4f\x50\xbc\x4d\x6c\x08\x40\xcf\x61\xdc\x33\x7e\xe7\xae\x7d\xb0\x26\x6e\xf3\xa2\x38\x2d\xfe\x7c\x35\x7d\x58\x7a\x1f\xaa\x6e\xfb\xff\x5d\x27\x9f\x3a\xde\x36\xd4\xea\x63\x6a\xef\x97\x98\x1d\xc5\x51\xfc\x0c\x00\x00\xff\xff\x92\x53\x1f\x96\x15\x05\x00\x00")

func resourceTmplSrcIntegrationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegrationGoTmpl,
		"resource/tmpl/src/integration.go.tmpl",
	)
}

func resourceTmplSrcIntegrationGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegrationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration.go.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplSrcIntegration_testGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\xcf\x6a\x32\x41\x10\xc4\xcf\xd3\x4f\x51\xdf\xc0\x07\xbb\x61\x51\xc8\x51\xf0\x98\x83\x87\x40\x0e\xbe\xc0\x30\xf6\xae\x43\xd6\xe9\xa5\xa7\x37\x89\x88\xef\x1e\x84\xc1\x20\x31\x87\x40\x8e\xf5\x87\xa2\x7e\x53\x88\xaf\x61\x60\x1c\x42\xca\x44\xe9\x30\x89\x1a\x1a\x72\xde\xb8\x58\xca\x83\xa7\x96\xa8\x9f\x73\xc4\x96\x8b\xbd\xc8\x34\x8f\xc1\x78\x93\xdf\x38\x9b\xe8\xb1\x31\x3c\xd4\xe6\x62\xdb\xe2\x44\x6e\xb9\xc4\x26\x17\x56\xc3\x9e\x95\x61\x7b\xc6\x28\x43\x8a\xe8\x45\x71\x94\x59\x71\xe9\x17\x72\x21\xda\x1c\x46\xac\xd6\x78\x24\xc7\x1f\x13\x47\xe3\x5d\x95\xa9\x47\x8d\xff\xad\x71\xcd\x4e\xe4\x9c\x2d\x9e\x54\x45\xfb\xc6\x7f\xfb\x82\xf7\x50\x90\x72\x14\x55\x8e\xd6\x61\x10\x5b\xe1\xff\xae\xbb\x0e\x5c\x94\xef\xea\xf2\x97\xdd\x92\x3b\xd3\xf9\x0e\xe5\x33\x9b\xa6\x58\xfe\x84\xd1\xf7\x22\xfe\x96\xb3\x5a\xbf\x61\xad\x8f\xee\x93\x96\x1b\xd2\xf2\x33\xe9\x67\x00\x00\x00\xff\xff\x95\x91\x9d\xff\xf4\x01\x00\x00")

func resourceTmplSrcIntegration_testGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplSrcIntegration_testGoTmpl,
		"resource/tmpl/src/integration_test.go.tmpl",
	)
}

func resourceTmplSrcIntegration_testGoTmpl() (*asset, error) {
	bytes, err := resourceTmplSrcIntegration_testGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/src/integration_test.go.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1509619467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceTmplVendorVendorJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xd3\x4b\x6f\xab\x38\x14\x07\xf0\x35\x7c\x8a\x51\xb6\x6d\xc0\x87\x97\x0d\xd2\x2c\x5a\x4d\xa2\xb4\x89\x9a\x69\x42\x9e\xa3\x59\x18\x63\x88\x13\x02\xad\xed\x3c\x48\xd5\xef\x7e\x45\xd5\x2b\xdd\x47\xdb\xbb\xc8\x2a\x4b\xce\xf9\x73\xd0\xff\x27\xf1\x62\x1a\x2d\x56\x6d\xb7\xbc\xd4\xad\xe8\xaf\x56\xeb\xda\x34\x5a\x22\x2f\x2b\xc9\x9b\x47\xcd\x95\x7e\x1b\x3d\x51\xb6\xa1\x79\x33\xfb\xcf\x34\x8c\x17\xd3\x30\x8c\x16\x5b\x71\xb6\x51\xbb\xed\xb8\x77\x03\x4d\xb8\xaf\x0a\x6f\x33\x97\x9e\xae\x51\xef\xb0\x96\x83\xd1\x60\x39\x94\x0f\x27\xe4\xdf\x1e\xfe\x6e\x8e\x18\xcd\x19\xbd\x6a\xa2\xb9\xd0\xab\x5d\x62\xb1\x6a\x6b\x8f\x85\xdc\x3d\x29\x5e\xda\x45\x95\xcb\x9d\x7a\x0f\x4a\xbe\x17\x4a\x54\x65\x13\x4e\x28\x24\x6e\xc0\x88\xc3\x7c\x8e\x7c\xe6\x65\x21\x38\x94\x10\x4e\x13\x94\xb2\x34\x04\x0a\x18\x02\x42\xb2\x5f\x5e\x8d\xc5\xf6\xad\x83\x83\x00\xb7\x91\xdb\x06\x2f\x86\x30\x72\xdc\xc8\x77\x97\xef\xd1\x3d\x97\xdf\x3f\xb2\x47\x16\x80\xe5\xff\xbc\xe8\x1c\x29\xd3\x3f\x6e\x4d\xc3\x78\xbd\xfe\x14\x60\x5d\x2f\xa6\xf5\xb2\x7f\xdb\x13\xf3\x38\xec\x72\x96\x60\x31\x9a\xd4\xf3\xd9\x21\xbd\xfb\x02\xa0\xe4\x07\xc9\x0b\xc1\x6c\x51\x66\x92\xb6\x45\xa9\x79\x2e\xa9\x16\x55\xa9\xda\x2a\xdd\xd8\x54\xe6\x1f\xaa\xb8\x90\x30\x02\xd4\x71\x48\x86\x59\xe2\x11\x2f\x0c\xd2\x34\x60\x04\x13\xf0\x29\x40\x98\x66\xae\x1f\x22\xfc\xa5\x0a\x6e\x3b\x28\x06\x37\xf2\xfd\x08\xe1\x8f\x54\xc0\x42\x9f\x91\x80\x85\x2c\xf4\x07\x11\x4f\xe3\xde\xc3\xa2\xf6\xa6\xcb\xf5\x3e\xeb\x2e\x82\x7f\x95\x3c\x4d\x48\x0e\xab\xfb\xc7\x33\x44\x18\x65\x2b\x7e\xa9\x24\x01\xef\x16\x30\x3d\xe5\xb7\xfd\xcd\x24\x79\x62\xc3\x74\xba\x1a\x3f\x0f\x4e\x4e\xf5\x8f\x77\x06\x49\x51\xe5\x97\x0a\xb2\x0f\x52\x67\xa8\x47\xf1\xd5\xfc\x98\x90\x85\xde\xbb\x03\x3c\x3a\xcd\x26\x21\xeb\x9d\xf3\xd7\x6c\xb9\x96\x82\x5d\xaa\xc9\xe3\xcd\xb0\xf3\x80\xe6\x57\x45\x47\xcc\xe2\xf9\x1d\x1e\xac\x87\xb3\x35\xec\xae\xea\x4c\x9d\x61\xa2\xd2\xcd\xa5\x82\xdc\x77\xf9\x18\xdf\x17\x4b\xb7\xd4\xd9\x8c\xc5\x59\xfd\xd8\x41\xcf\x61\x3f\x1f\x09\xf2\x1b\x48\x55\xd0\x32\xb7\x2a\x99\xdb\x47\x5b\xd5\xca\xde\x95\xe2\xf8\x41\x6f\x2f\xe0\x94\x33\x4c\xc2\x30\x81\x34\x0d\x3d\x9f\x39\x7e\x9a\x00\x66\x98\x24\xd4\xcd\x10\xf3\x09\x0d\x02\x70\xbf\xea\x0d\xd0\x46\x4e\xec\xa0\xc8\xf5\x23\x84\x96\x6f\x25\x4c\xe3\x7f\xf3\xd5\xfc\x16\x00\x00\xff\xff\x63\xf1\x11\x04\x58\x07\x00\x00")

func resourceTmplVendorVendorJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourceTmplVendorVendorJsonTmpl,
		"resource/tmpl/vendor/vendor.json.tmpl",
	)
}

func resourceTmplVendorVendorJsonTmpl() (*asset, error) {
	bytes, err := resourceTmplVendorVendorJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/tmpl/vendor/vendor.json.tmpl", size: 1880, mode: os.FileMode(420), modTime: time.Unix(1509716271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/tmpl/CHANGELOG.md.tmpl":            resourceTmplChangelogMdTmpl,
	"resource/tmpl/LICENSE.tmpl":                 resourceTmplLicenseTmpl,
	"resource/tmpl/Makefile.tmpl":                resourceTmplMakefileTmpl,
	"resource/tmpl/README.md.tmpl":               resourceTmplReadmeMdTmpl,
	"resource/tmpl/configuration.yml.tmpl":       resourceTmplConfigurationYmlTmpl,
	"resource/tmpl/definition.yml.tmpl":          resourceTmplDefinitionYmlTmpl,
	"resource/tmpl/src/integration.go.tmpl":      resourceTmplSrcIntegrationGoTmpl,
	"resource/tmpl/src/integration_test.go.tmpl": resourceTmplSrcIntegration_testGoTmpl,
	"resource/tmpl/vendor/vendor.json.tmpl":      resourceTmplVendorVendorJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resource": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"CHANGELOG.md.tmpl":      &bintree{resourceTmplChangelogMdTmpl, map[string]*bintree{}},
			"LICENSE.tmpl":           &bintree{resourceTmplLicenseTmpl, map[string]*bintree{}},
			"Makefile.tmpl":          &bintree{resourceTmplMakefileTmpl, map[string]*bintree{}},
			"README.md.tmpl":         &bintree{resourceTmplReadmeMdTmpl, map[string]*bintree{}},
			"configuration.yml.tmpl": &bintree{resourceTmplConfigurationYmlTmpl, map[string]*bintree{}},
			"definition.yml.tmpl":    &bintree{resourceTmplDefinitionYmlTmpl, map[string]*bintree{}},
			"src": &bintree{nil, map[string]*bintree{
				"integration.go.tmpl":      &bintree{resourceTmplSrcIntegrationGoTmpl, map[string]*bintree{}},
				"integration_test.go.tmpl": &bintree{resourceTmplSrcIntegration_testGoTmpl, map[string]*bintree{}},
			}},
			"vendor": &bintree{nil, map[string]*bintree{
				"vendor.json.tmpl": &bintree{resourceTmplVendorVendorJsonTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
